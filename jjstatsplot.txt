Directory Structure:
-------------------
/ 
├── data/
│   ├── histopathology.rda
│   ├── histopathologyGraphsPlots.omv
│   └── histopathologyGraphsPlots2.omv
├── docs/
│   ├── reference/
│   │   ├── index.html
│   │   ├── jjbarstats.html
│   │   ├── jjbarstatsClass.html
│   │   ├── jjbetweenstats.html
│   │   ├── jjbetweenstatsClass.html
│   │   ├── jjcorrmat.html
│   │   ├── jjcorrmatClass.html
│   │   ├── jjdotplotstats.html
│   │   ├── jjdotplotstatsClass.html
│   │   ├── jjhistostats.html
│   │   ├── jjhistostatsClass.html
│   │   ├── jjpiestats.html
│   │   ├── jjpiestatsClass.html
│   │   ├── jjscatterstats.html
│   │   ├── jjscatterstatsClass.html
│   │   └── Rplot001.png
│   ├── 404.html
│   ├── authors.html
│   ├── bootstrap-toc.css
│   ├── bootstrap-toc.js
│   ├── docsearch.css
│   ├── docsearch.js
│   ├── index.html
│   ├── link.svg
│   ├── pkgdown.css
│   ├── pkgdown.js
│   ├── pkgdown.yml
│   └── sitemap.xml
├── jamovi/
│   ├── 0000.yaml
│   ├── 00refs.yaml
│   ├── jjbarstats.a.yaml
│   ├── jjbarstats.r.yaml
│   ├── jjbarstats.u.yaml
│   ├── jjbetweenstats.a.yaml
│   ├── jjbetweenstats.r.yaml
│   ├── jjbetweenstats.u.yaml
│   ├── jjcorrmat.a.yaml
│   ├── jjcorrmat.r.yaml
│   ├── jjcorrmat.u.yaml
│   ├── jjdotplotstats.a.yaml
│   ├── jjdotplotstats.r.yaml
│   ├── jjdotplotstats.u.yaml
│   ├── jjhistostats.a.yaml
│   ├── jjhistostats.r.yaml
│   ├── jjhistostats.u.yaml
│   ├── jjpiestats.a.yaml
│   ├── jjpiestats.r.yaml
│   ├── jjpiestats.u.yaml
│   ├── jjscatterstats.a.yaml
│   ├── jjscatterstats.r.yaml
│   ├── jjscatterstats.u.yaml
│   ├── jjwithinstats.a.yaml
│   ├── jjwithinstats.r.yaml
│   └── jjwithinstats.u.yaml
├── man/
│   ├── jjbarstats.Rd
│   ├── jjbarstatsClass.Rd
│   ├── jjbetweenstats.Rd
│   ├── jjbetweenstatsClass.Rd
│   ├── jjcorrmat.Rd
│   ├── jjcorrmatClass.Rd
│   ├── jjdotplotstats.Rd
│   ├── jjdotplotstatsClass.Rd
│   ├── jjhistostats.Rd
│   ├── jjhistostatsClass.Rd
│   ├── jjpiestats.Rd
│   ├── jjpiestatsClass.Rd
│   ├── jjscatterstats.Rd
│   ├── jjscatterstatsClass.Rd
│   ├── jjstatsplot-package.Rd
│   ├── jjwithinstats.Rd
│   └── jjwithinstatsClass.Rd
├── R/
│   ├── 00jmv.R
│   ├── jjbarstats.b.R
│   ├── jjbarstats.h.R
│   ├── jjbetweenstats.b.R
│   ├── jjbetweenstats.h.R
│   ├── jjcorrmat.b.R
│   ├── jjcorrmat.h.R
│   ├── jjdotplotstats.b.R
│   ├── jjdotplotstats.h.R
│   ├── jjhistostats.b.R
│   ├── jjhistostats.h.R
│   ├── jjpiestats.b.R
│   ├── jjpiestats.h.R
│   ├── jjscatterstats.b.R
│   ├── jjscatterstats.h.R
│   ├── jjstatsplot-data.R
│   ├── jjstatsplot-package.R
│   ├── jjwithinstats.b.R
│   └── jjwithinstats.h.R
├── .Rbuildignore
├── DESCRIPTION
├── jjstatsplot.code-workspace
├── jjstatsplot.Rproj
├── LICENSE.md
├── NAMESPACE
└── README.md

File Contents:
--------------
File: jamovi\0000.yaml
--------------------------------------------------
Content of jamovi\0000.yaml:
---
title: Wrapper for ggstatsplot
name: jjstatsplot
version: 0.0.2.45
jms: '1.0'
authors:
  - Serdar Balci
maintainer: Serdar Balci <drserdarbalci@gmail.com>
date: '2025-01-10'
type: R
description: >-
  A wrapper for ggstatsplot: jjstatsplot help researchers to generate plots in
  jamovi based on ggstatsplot package.
analyses:
  - title: Histogram
    name: jjhistostats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Continuous
    menuTitle: Histogram
    menuSubtitle: Histogram
    description: |
      'Wrapper Function for ggstatsplot::gghistostats and
      ggstatsplot::grouped_gghistostats to generate Histogram.'
  - title: Scatter Plot
    name: jjscatterstats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Continuous vs Continuous
    menuTitle: Scatter Plot
    menuSubtitle: Scatter Plot
    description: |
      'Wrapper Function for ggstatsplot::ggscatterstats and
      ggstatsplot::grouped_ggscatterstats to generate Scatter Plot.'
  - title: Correlation Matrix
    name: jjcorrmat
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Continuous vs Continuous
    menuTitle: Correlation Matrix
    menuSubtitle: Correlation Matrix
    description: |
      'Wrapper Function for ggstatsplot::ggcorrmat and
      ggstatsplot::grouped_ggcorrmat to generate Correlation Matrix.'
  - title: Box-Violin Plots to Compare Between Groups
    name: jjbetweenstats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Categorical vs Continuous
    menuTitle: Box-Violin Plots to Compare Between Groups
    menuSubtitle: Independent Samples
    description: |
      'Wrapper Function for ggstatsplot::ggbetweenstats and
      ggstatsplot::grouped_ggbetweenstats to generate Violin Plots.'
  - title: Dot Chart
    name: jjdotplotstats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Categorical vs Continuous
    menuTitle: Dot Chart
    menuSubtitle: Dot Chart
    description: |
      'Wrapper Function for ggstatsplot::ggdotplotstats and
      ggstatsplot::grouped_ggdotplotstats to generate Dot Charts.'
  - title: Bar Charts
    name: jjbarstats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Categorical vs Categorical
    menuTitle: Bar Charts
    menuSubtitle: Bar Charts, Grouped Bar Charts
    description: |
      'Wrapper Function for ggstatsplot::ggbarstats and
      ggstatsplot::grouped_ggbarstats to generate Bar Charts.'
  - title: Pie Charts
    name: jjpiestats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Categorical vs Categorical
    menuTitle: Pie Charts
    menuSubtitle: Pie Charts
    description: |
      'Wrapper Function for ggstatsplot::ggpiestats and
      ggstatsplot::grouped_ggpiestats to generate Pie Charts.'
  - title: Box-Violin Plots to Compare Within Groups
    name: jjwithinstats
    ns: jjstatsplot
    menuGroup: JJStatsPlot
    menuSubgroup: Categorical vs Continuous
    menuTitle: Box-Violin Plots to Compare Within Groups
    menuSubtitle: Repeated Continuous Measurements
datasets:
  - name: histopathology including analysis
    path: histopathologyGraphsPlots.omv
    description: Examples for Graphs and Plots
    tags:
      - GGStatsPlot
      - Histogram
      - Violin Plots
      - Bar Charts
      - Pie Charts
      - Dot Charts
      - Scatter Plots
      - Correlation Matrix
usesNative: true
minApp: 1.2.19

...


File: jamovi\00refs.yaml
--------------------------------------------------
Content of jamovi\00refs.yaml:
---
refs:
    emmeans:
        type: 'software'
        author: Lenth, R.
        year: 2018
        title: 'emmeans: Estimated Marginal Means, aka Least-Squares Means'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=emmeans'
        url: https://CRAN.R-project.org/package=emmeans

    afex:
        type: 'software'
        author: Singmann, H.
        year: 2018
        title: 'afex: Analysis of Factorial Experiments'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=afex'
        url: https://CRAN.R-project.org/package=afex

    R:
        type: 'software'
        author: R Core Team
        year: 2018
        title: 'A Language and Envionment for Statistical Computing'
        publisher: '[Computer software]. Retrieved from https://CRAN.R-project.org/'
        url: https://CRAN.R-project.org/

    BF:
        type: 'software'
        author: Morey, R. D., & Rouder, J. N.
        year: 2018
        title: 'BayesFactor: Computation of Bayes Factors for Common Designs'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=BayesFactor'
        url: https://CRAN.R-project.org/package=BayesFactor

    btt:
        type: 'article'
        author: Rouder, J. N., Speckman, P. L., Sun, D., Morey, R. D., & Iverson, G.
        year: 2009
        title: Bayesian t tests for accepting and rejecting the null hypothesis
        publisher: Psychonomic Bulletin & Review
        volume: 16
        pages: 225-237

    car:
        type: 'software'
        author: Fox, J., & Weisberg, S.
        year: 2018
        title: 'car: Companion to Applied Regression'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=car'
        url: https://CRAN.R-project.org/package=car

    ggplot2:
        type: 'software'
        author: Wickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., Woo, K., & RStudio
        year: 2018
        title: 'ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=ggplot2'
        url: https://CRAN.R-project.org/package=ggplot2

    ggridges:
        type: 'software'
        author: Wilke, C., & RStudio
        year: 2018
        title: 'ggridges: Ridgeline Plots in ggplot2'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=ggridges'
        url: https://CRAN.R-project.org/package=ggridges

    mvnormtest:
        type: 'software'
        author: Jarek, S.
        year: 2012
        title: 'mvnormtest: Normality test for multivariate variables'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=mvnormtest'
        url: https://CRAN.R-project.org/package=mvnormtest

    PMCMR:
        type: 'software'
        author: Pohlert, T.
        year: 2018
        title: 'PMCMR: Calculate Pairwise Multiple Comparisons of Mean Rank Sums'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=PMCMR'
        url: https://CRAN.R-project.org/package=PMCMR

    ROCR:
        type: 'software'
        author: Sing, T., Sander, O., Beerenwinkel, N., & Lengauer, T.
        year: 2015
        title: 'ROCR: Visualizing the Performance of Scoring Classifiers'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=ROCR'
        url: https://CRAN.R-project.org/package=ROCR

    nnet:
        type: 'software'
        author: Ripley, B., Venables W.
        year: 2016
        title: 'nnet: Feed-Forward Neural Networks and Multinomial Log-Linear Models'
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=nnet'
        url: https://CRAN.R-project.org/package=nnet

    MASS:
        type: 'software'
        author: Ripley, B., Venables W., Bates, D. M., Hornik, K., Gebhardt, A., & Firth, D.
        year: 2018
        title: "MASS: Support Functions and Datasets for Venables and Ripley's MASS"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=MASS'
        url: https://CRAN.R-project.org/package=MASS

    vcd:
        type: 'software'
        author: Meyer, D., Zeileis, A., Hornik, K., Gerber, F., & Friendly, M.
        year: 2017
        title: "vcd: Visualizing Categorical Data"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=vcd'
        url: https://CRAN.R-project.org/package=vcd

    vcdExtra:
        type: 'software'
        author: Friendly M., Turner, H., Zeileis, A., Murdoch, D., & Firth, D.
        year: 2017
        title: "vcdExtra: 'vcd' Extensions and Additions"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=vcdExtra'
        url: https://CRAN.R-project.org/package=vcdExtra

    exact2x2:
        type: 'software'
        author: Fay, M. P., Hunsberger, S. A., Nason, M., & Gabriel, E.
        year: 2018
        title: "exact2x2: Exact Tests and Confidence Intervals for 2x2 Tables"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=exact2x2'
        url: https://CRAN.R-project.org/package=exact2x2

    psych:
        type: 'software'
        author: Revelle, W.
        year: 2019
        title: "psych: Procedures for Psychological, Psychometric, and Personality Research"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=psych'
        url: https://CRAN.R-project.org/package=psych

    lavaan:
        type: 'software'
        author: Rosseel, Y., et al.
        year: 2018
        title: "lavaan: Latent Variable Analysis"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=lavaan'
        url: https://CRAN.R-project.org/package=lavaan

    semPlot:
        type: 'software'
        author: Epskamp, S.
        year: 2017
        title: "semPlot: Path Diagrams and Visual Analysis of Various SEM Packages' Output"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=semPlot'
        url: https://CRAN.R-project.org/package=semPlot

    ggstatsplot:
        type: 'software'
        author: Patil, I.
        year: 2018
        title: "ggstatsplot: 'ggplot2' Based Plots with Statistical Details"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=ggstatsplot'
        url: https://CRAN.R-project.org/package=ggstatsplot
        doi: '10.5281/zenodo.2074621'

    report:
        type: 'software'
        author: Makowski, Dominique, Lüdecke, Daniel
        year: 2019
        title: "The report package for R: Ensuring the use of best practices for results reporting"
        publisher: '[R package]. Retrieved from https://github.com/easystats/report'
        url: https://github.com/easystats/report

    arsenal:
        type: 'software'
        author: Heinzen, E Sinnwell, J Atkinson, E Gunderson, T Dougherty, G
        year: 2018
        title: "arsenal: An Arsenal of 'R' Functions for Large-Scale Statistical Summaries"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=arsenal'
        url: https://CRAN.R-project.org/package=arsenal

    tangram:
        type: 'software'
        author: Garbett, S.
        year: 2018
        title: "tangram: The Grammar of Tables"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=tangram'
        url: https://CRAN.R-project.org/package=tangram

    irr:
        type: 'software'
        author: Matthias Gamer, Jim Lemon, Ian Fellows, Puspendra Singh
        year: 2019
        title: "Various Coefficients of Interrater Reliability and Agreement."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=irr'
        url: https://CRAN.R-project.org/package=irr

    tableone:
        type: 'software'
        author: Kazuki, Y.
        year: 2019
        title: "tableone: Create 'Table 1' to Describe Baseline Characteristics"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=tableone'
        url: https://CRAN.R-project.org/package=tableone

    janitor:
        type: 'software'
        author: Firke, S.
        year: 2019
        title: "janitor: Simple Tools for Examining and Cleaning Dirty Data."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=janitor'
        url: https://CRAN.R-project.org/package=janitor


    finalfit:
        type: 'software'
        author: Ewen Harrison and Tom Drake and Riinu Ots
        year: 2019
        title: "finalfit: Quickly Create Elegant Regression Results Tables and Plots when Modelling"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=finalfit'
        url: https://CRAN.R-project.org/package=finalfit


    caret:
        type: 'software'
        author: Max Kuhn
        year: 2020
        title: "caret: Classification and Regression Training"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=caret'
        url: https://CRAN.R-project.org/package=caret

    psycho:
        type: 'software'
        author: Makowski, D.
        year: 2018
        title: "The Psycho Package: An Efficient and Publishing-Oriented Workflow for Psychological Science. Journal of Open Source Software, 3(22), 470."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=psycho.R'
        url: https://CRAN.R-project.org/package=psycho.R

    survival:
        type: 'software'
        author: Terry M Therneau, Thomas Lumley
        year: 2019
        title: "survival: Survival Analysis"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=survival'
        url: https://CRAN.R-project.org/package=survival

    survminer:
        type: 'software'
        author: Alboukadel Kassambara and Marcin Kosinski and Przemyslaw Biecek
        year: 2019
        title: "survminer: Drawing Survival Curves using 'ggplot2'"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=survminer'
        url: https://CRAN.R-project.org/package=survminer


    ggalluvial:
        type: 'software'
        author: Jason Cory Brunson
        year: 2019
        title: "ggalluvial: Alluvial Plots in 'ggplot2'."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=ggalluvial'
        url: https://CRAN.R-project.org/package=ggalluvial

    explore:
        type: 'software'
        author: Roland Krasser
        year: 2020
        title: "explore: Simplifies Exploratory Data Analysis."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=explore'
        url: https://CRAN.R-project.org/package=explore

    FFTrees:
        type: 'software'
        author: Nathaniel Phillips, Hansjoerg Neth, Jan Woike and Wolfgang Gaissmaer
        year: 2019
        title: "FFTrees: Generate, Visualise, and Evaluate Fast-and-Frugal Decision Trees"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=FFTrees'
        url: https://CRAN.R-project.org/package=FFTrees


    rpart:
        type: 'software'
        author: Terry Therneau and Beth Atkinson
        year: 2019
        title: "rpart: Recursive Partitioning and Regression Trees."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=rpart'
        url: https://CRAN.R-project.org/package=rpart

    rpart.plot:
        type: 'software'
        author: Stephen Milborrow
        year: 2019
        title: "rpart.plot: Plot 'rpart' Models: An Enhanced Version of 'plot.rpart'"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=rpart.plot'
        url: https://CRAN.R-project.org/package=rpart.plot

    gtsummary:
        type: 'software'
        author: Daniel D. Sjoberg, Margie Hannum, Karissa Whiting and Emily C. Zabor
        year: 2020
        title: "gtsummary: Presentation-Ready Data Summary and Analytic Result Tables"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=gtsummary'
        url: https://CRAN.R-project.org/package=gtsummary

    rmngb:
        type: 'software'
        author: Antoine Filipovic Pierucci
        year: 2014
        title: "rmngb: Miscellaneous Collection of Functions for Medical Data Analysis"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=rmngb'
        url: https://CRAN.R-project.org/package=rmngb

    RVAideMemoire:
        type: 'software'
        author: Maxime Hervé
        year: 2020
        title: "RVAideMemoire: Testing and Plotting Procedures for Biostatistics"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=RVAideMemoire'
        url: https://CRAN.R-project.org/package=RVAideMemoire


    chisq.posthoc.test:
        type: 'software'
        author: Daniel Ebbert
        year: 2019
        title: "chisq.posthoc.test: A Post Hoc Analysis for Pearson's Chi-Squared Test for Count Data"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=chisq.posthoc.test'
        url: https://CRAN.R-project.org/package=chisq.posthoc.test



    easyalluvial:
        type: 'software'
        author: Bjoern Koneswarakantha
        year: 2019
        title: "easyalluvial: Generate Alluvial Plots with a Single Line of Code."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=easyalluvial'
        url: https://CRAN.R-project.org/package=easyalluvial


    parcats:
        type: 'software'
        author: Bjoern Koneswarakantha
        year: 2019
        title: "parcats: Interactive Parallel Categories Diagrams for 'easyalluvial'"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=parcats'
        url: https://CRAN.R-project.org/package=parcats


    plotROC:
        type: 'software'
        author: Michael C. Sachs
        year: 2017
        title: "plotROC: A Tool for Plotting ROC Curves.Journal of Statistical Software, Code Snippets, 79(2), 1-19. doi:10.18637/jss.v079.c02"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=plotROC'
        url: https://CRAN.R-project.org/package=plotROC


    RGraphGallery:
        type: 'website'
        author: Holtz Yan
        year: 2020
        title: "The R Graph Gallery"
        publisher: 'A website that displays hundreds of R charts https://www.r-graph-gallery.com'
        url: https://github.com/holtzy/R-graph-gallery


    hrbrthemes:
        type: 'software'
        author: Bob Rudis
        year: 2020
        title: "hrbrthemes: Additional Themes, Theme Components and Utilities for 'ggplot2'."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=hrbrthemes'
        url: https://CRAN.R-project.org/package=hrbrthemes


    retractcheck:
        type: 'software'
        author: Chris Hartgerink and Frederik Aust
        year: 2019
        title: "retractcheck: Retraction Scanner"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=retractcheck'
        url: https://CRAN.R-project.org/package=retractcheck


    RefManageR:
        type: 'software'
        author: McLean MW
        year: 2017
        title: 'RefManageR: Import and Manage BibTeX and BibLaTeX References in R. The Journal of Open Source Software.'
        doi: 10.21105/joss.00338
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=RefManageR'
        url: https://CRAN.R-project.org/package=RefManageR


    rcrossref:
        type: 'software'
        author: Scott Chamberlain and Hao Zhu and Najko Jahn and Carl Boettiger and Karthik Ram
        year: 2020
        title: "rcrossref: Client for Various 'CrossRef' 'APIs'"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=rcrossref'
        url: https://CRAN.R-project.org/package=rcrossref


    epiR:
        type: 'software'
        author: >-
            Mark Stevenson with contributions from Telmo Nunes,
            Cord Heuer, Jonathon Marshall, Javier Sanchez, Ron
            Thornton, Jeno Reiczigel, Jim Robison-Cox, Paola
            Sebastiani, Peter Solymos, Kazuki Yoshida, Geoff Jones,
            Sarah Pirikahu, Simon Firestone, Ryan Kyle, Johann
            Popp, Mathew Jay and Charles Reynard.
        year: 2020
        title: "epiR: Tools for the Analysis of Epidemiological Data."
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=epiR'
        url: https://CRAN.R-project.org/package=epiR


    KMunicate:
        type: 'software'
        author: Alessandro Gasparini
        year: 2020
        title: "KMunicate: KMunicate-Style Kaplan–Meier Plots"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=KMunicate'
        url: https://CRAN.R-project.org/package=KMunicate


    KMunicate2:
        type: 'article'
        author: Morris TP, Jarvis CI, Cragg W, et al
        title: "Proposals on Kaplan–Meier plots in medical research and a survey of stakeholder views: KMunicate"
        year: 2019
        publisher: 'BMJ Open 2019;9:e030215.'
        doi: 10.1136/bmjopen-2019-030215
        url: https://bmjopen.bmj.com/content/9/9/e030215


    Fagan:
        type: 'software'
        author: Adam Chekroud
        title: "nomogrammer: Fagan's nomograms with ggplot2"
        publisher: 'GitHub'
        year: 2020
        url: https://github.com/achekroud/nomogrammer


    Fagan2:
        type: 'article'
        author:
        title: 'StATS: What is a Fagan nomogram?'
        publisher: 'website'
        year: 2020
        url: http://www.pmean.com/definitions/fagan.htm


    benford.analysis:
        type: 'software'
        author: Carlos Cinelli
        year: 2020
        title: "benford.analysis: Benford Analysis for Data Validation and Forensic Analytics"
        publisher: '[R package]. Retrieved from http://github.com/carloscinelli/benford.analysis'
        url: http://github.com/carloscinelli/benford.analysis


    vtree:
        type: 'software'
        author: Nick Barrowman
        year: 2020
        title: "vtree: Display Information About Nested Subsets of a Data Frame"
        publisher: '[R package]. Retrieved from https://CRAN.R-project.org/package=vtree'
        url: https://CRAN.R-project.org/package=vtree


    PathologyKappa:
        type: 'article'
        title: Pathologists should probably forget about kappa. Percent agreement, diagnostic specificity and related metrics provide more clinically applicable measures of interobserver variability
        year: 2020
        author:
        publisher: Annals of Diagnostic Pathology
        volume: 47
        url: https://www.sciencedirect.com/science/article/abs/pii/S1092913420301040


    DiagnosticTests:
        type: 'article'
        title: The Interpretation of SARS-CoV-2 Diagnostic Tests
        year: 2020
        author: Stites EC, Wilen CB.
        publisher:  Med (N Y).
        doi: 10.1016/j.medj.2020.08.001
        url: https://www.cell.com/med/fulltext/S2666-6340(20)30016-7

    dichotomizing:
        type: 'article'
        title: 'Dichotomizing continuous predictors in multiple regression: a bad idea.'
        year: 2006
        author: Royston, P., Altman, D.G. and Sauerbrei, W.
        publisher:  Statist. Med.
        volume: 25
        pages: 127-141
        doi: 10.1002/sim.2331
        url: https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.2331

    bbccookbook:
        type: 'article'
        title: 'BBC Visual and Data Journalism cookbook for R graphics'
        year: 2019
        author: BBC data team
        url: https://bbc.github.io/rcookbook/

    bbplot:
        type: 'software'
        author: Nassos Stylianou and Will william.dahlgreen@bbc.co.uk Dahlgreen and Robert robert.cuffe@bbc.co.uk Cuffe and Tom Calver and Ransome Mpini
        year: 2020
        title: "bbplot: MAKING GGPLOT GRAPHICS IN BBC NEWS STYLE"
        publisher: '[R package]. Retrieved from https://github.com/bbc/bbplot'
        url: https://github.com/bbc/bbplot

    ClinicoPathJamoviModule:
        type: 'software'
        author: Serdar Balci
        year: 2022
        title: "ClinicoPath jamovi Module doi:10.5281/zenodo.3997188"
        publisher: '[R package]. Retrieved from https://github.com/sbalci/ClinicoPathJamoviModule'
        doi: 10.17605/OSF.IO/9SZUD
        url: https://www.serdarbalci.com/ClinicoPathJamoviModule/


...


File: jamovi\jjbarstats.a.yaml
--------------------------------------------------
Content of jamovi\jjbarstats.a.yaml:
---
name:  jjbarstats
title: Bar Charts
menuGroup: JJStatsPlot
menuSubgroup: 'Categorical vs Categorical'
# menuSubtitle: 'Bar Charts, Grouped Bar Charts'
version: '1.0.0'
jas: '1.2'

description:
    main: |
        'Wrapper Function for ggstatsplot::ggbarstats and
        ggstatsplot::grouped_ggbarstats to generate Bar Charts.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:

    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: Dependent Variable
      type: Variables
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: group
      title: Grouping Variable
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    # - name: counts
    #   title: 'Counts: (Optional)'
    #   type: Variable
    #   suggested: [ continuous ]
    #   permitted: [ numeric ]


    # - name: direction
    #   title: 'Measurement Type'
    #   type: List
    #   options:
    #     - title: Repeated (within groups)
    #       name: repeated
    #     - title: Independent (between groups)
    #       name: independent
    #   default: independent
    #   description:
    #       ui: options for measurement type
    #       R: select measurement type (repeated or independent)


    - name: excl
      title: Exclude Missing (NA)
      type: Bool
      default: true


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric

    - name: pairwisecomparisons
      title: Pairwise Comparisons
      type: Bool
      default: true

    - name: pairwisedisplay
      title: 'Pairwise Display'
      type: List
      options:
        - title: significant
          name: significant
        - title: non-significant
          name: non-significant
        - title: everything
          name: everything
      default: significant


    - name: padjustmethod
      title: 'Adjustment Method'
      type: List
      options:
        - title: holm
          name: holm
        - title: hochberg
          name: hochberg
        - title: hommel
          name: hommel
        - title: bonferroni
          name: bonferroni
        - title: BH
          name: BH
        - title: BY
          name: BY
        - title: fdr
          name: fdr
        - title: none
          name: none
      default: holm


    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false



    # - name: ratio
    #   title: >
    #       Expected Proportions
    #   type: String
    #   default: ''

    # - name: sample.size.label
    #   title: sample.size.label
    #   type: Bool
    #   default: true

    # - name: label
    #   title: label
    #   type: List
    #   options:
    #     - title: percentage
    #       name: percentage
    #     - title: counts
    #       name: counts
    #     - title: both
    #       name: both
    #   default: percentage
    #   description:
    #       R: >
    #         label

    # - name: perc.k
    #   title: perc.k
    #   type: Integer
    #   default: 0

    # - name: bf.message
    #   title: bf.message
    #   type: Bool
    #   default: true


    # - name: sampling.plan
    #   title: sampling.plan
    #   type: List
    #   options:
    #     - title: indepMulti
    #       name: indepMulti
    #     - title: poisson
    #       name: poisson
    #     - title: jointMulti
    #       name: jointMulti
    #     - title: hypergeom
    #       name: hypergeom
    #   default: indepMulti
    #   description:
    #       R: >
    #         sampling.plan


    # - name: fixed.margin
    #   title: fixed.margin
    #   type: List
    #   options:
    #     - title: rows
    #       name: rows
    #     - title: cols
    #       name: cols
    #   default: rows
    #   description:
    #       R: >
    #         fixed.margin


    # - name: title
    #   title: >
    #       Plot Title
    #   type: String
    #   default: ''

    # - name: resultssubtitle
    #   title: Results Subtitle
    #   type: Bool
    #   default: true

    # - name: subtitle
    #   title: >
    #       Plot Subtitle
    #   type: String
    #   default: ''

    # - name: caption
    #   title: >
    #       Plot Caption
    #   type: String
    #   default: ''

    # - name: conf.level
    #   title: conf.level
    #   type: Number
    #   default: 0.95
    #   min: 0.00
    #   max: 1.00

#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# legend.title
# Title text for the legend.
#
# xlab
# Custom text for the x axis label (Default: NULL, which will cause the x axis label to be the x variable).
#
# ylab
# Custom text for the y axis label (Default: NULL).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2).
#
# proportion.test
# Decides whether proportion test for main variable is to be carried out for each level of y (Default: TRUE).
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of package from which the palette is desired as string or symbol.
#
# palette
# Name of palette as string or symbol.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.



...


# ggbarstats(
#   data,
#   x,
#   y,
#   counts = NULL,
#   ratio = NULL,
#   paired = FALSE,
#   results.subtitle = TRUE,
#   sample.size.label = TRUE,
#   label = "percentage",
#   label.args = list(alpha = 1, fill = "white"),
#   conf.level = 0.95,
#   k = 2L,
#   proportion.test = TRUE,
#   perc.k = 0,
#   bf.message = TRUE,
#   sampling.plan = "indepMulti",
#   fixed.margin = "rows",
#   prior.concentration = 1,
#   title = NULL,
#   subtitle = NULL,
#   caption = NULL,
#   legend.title = NULL,
#   xlab = NULL,
#   ylab = NULL,
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   package = "RColorBrewer",
#   palette = "Dark2",
#   ggplot.component = NULL,
#   output = "plot",
#   ...
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The variable to use as the rows in the contingency table.
#
# y
# The variable to use as the columns in the contingency table. Default is NULL. If NULL, one-sample proportion test (a goodness of fit test) will be run for the x variable. Otherwise an appropriate association test will be run. This argument can not be NULL for ggbarstats function.
#
# counts
# A string naming a variable in data containing counts, or NULL if each row represents a single observation.
#
# ratio
# A vector of proportions: the expected proportions for the proportion test (should sum to 1). Default is NULL, which means the null is equal theoretical proportions across the levels of the nominal variable. This means if there are two levels this will be ratio = c(0.5,0.5) or if there are four levels this will be ratio = c(0.25,0.25,0.25,0.25), etc.
#
# paired
# Logical indicating whether data came from a within-subjects or repeated measures design study (Default: FALSE). If TRUE, McNemar's test subtitle will be returned. If FALSE, Pearson's chi-square test will be returned.
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable y (Default: TRUE).
#
# label
# Character decides what information needs to be displayed on the label in each pie slice. Possible options are "percentage" (default), "counts", "both".
#
# label.args
# Additional aesthetic arguments that will be passed to geom_label.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# proportion.test
# Decides whether proportion test for x variable is to be carried out for each level of y (Default: TRUE).
#
# perc.k
# Numeric that decides number of decimal places for percentage labels (Default: 0).
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# sampling.plan
# Character describing the sampling plan. Possible options are "indepMulti" (independent multinomial; default), "poisson", "jointMulti" (joint multinomial), "hypergeom" (hypergeometric). For more, see ?BayesFactor::contingencyTableBF().
#
# fixed.margin
# For the independent multinomial sampling plan, which margin is fixed ("rows" or "cols"). Defaults to "rows".
#
# prior.concentration
# Specifies the prior concentration parameter, set to 1 by default. It indexes the expected deviation from the null hypothesis under the alternative, and corresponds to Gunel and Dickey's (1974) "a" parameter.
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# legend.title
# Title text for the legend.
#
# xlab
# Custom text for the x axis label (Default: NULL, which will cause the x axis label to be the x variable).
#
# ylab
# Custom text for the y axis label (Default: NULL).
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
#
# grouped_ggbarstats(
#   data,
#   x,
#   y,
#   counts = NULL,
#   grouping.var,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The variable to use as the rows in the contingency table.
#
# y
# The variable to use as the columns in the contingency table. Default is NULL. If NULL, one-sample proportion test (a goodness of fit test) will be run for the x variable. Otherwise an appropriate association test will be run. This argument can not be NULL for ggbarstats function.
#
# counts
# A string naming a variable in data containing counts, or NULL if each row represents a single observation.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
# ...
# Arguments passed on to ggbarstats
#
# xlab
# Custom text for the x axis label (Default: NULL, which will cause the x axis label to be the x variable).
#
# ylab
# Custom text for the y axis label (Default: NULL).
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable y (Default: TRUE).
#
# ratio
# A vector of proportions: the expected proportions for the proportion test (should sum to 1). Default is NULL, which means the null is equal theoretical proportions across the levels of the nominal variable. This means if there are two levels this will be ratio = c(0.5,0.5) or if there are four levels this will be ratio = c(0.25,0.25,0.25,0.25), etc.
#
# paired
# Logical indicating whether data came from a within-subjects or repeated measures design study (Default: FALSE). If TRUE, McNemar's test subtitle will be returned. If FALSE, Pearson's chi-square test will be returned.
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# label
# Character decides what information needs to be displayed on the label in each pie slice. Possible options are "percentage" (default), "counts", "both".
#
# label.args
# Additional aesthetic arguments that will be passed to geom_label.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# proportion.test
# Decides whether proportion test for x variable is to be carried out for each level of y (Default: TRUE).
#
# perc.k
# Numeric that decides number of decimal places for percentage labels (Default: 0).
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# sampling.plan
# Character describing the sampling plan. Possible options are "indepMulti" (independent multinomial; default), "poisson", "jointMulti" (joint multinomial), "hypergeom" (hypergeometric). For more, see ?BayesFactor::contingencyTableBF().
#
# fixed.margin
# For the independent multinomial sampling plan, which margin is fixed ("rows" or "cols"). Defaults to "rows".
#
# prior.concentration
# Specifies the prior concentration parameter, set to 1 by default. It indexes the expected deviation from the null hypothesis under the alternative, and corresponds to Gunel and Dickey's (1974) "a" parameter.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# legend.title
# Title text for the legend.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.
#
#


File: jamovi\jjbarstats.r.yaml
--------------------------------------------------
Content of jamovi\jjbarstats.r.yaml:
---
name:  jjbarstats
title: Bar Charts
jrs:   '1.1'

clearWith:
    - dep
    - group
    - grvar
    - direction
    - originaltheme


items:

    - name:  todo
      title: To Do
      type:  Html


      # title: '`Bar Chart ${group} - {dep} by {grvar}`'

    - name: plot2
      title: '`Bar Chart Splitted by {grvar}`'
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

      # title: '`Bar Chart ${group} - {dep}`'


    - name: plot
      title: Bar Chart
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot
      requiresData: true


refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjbarstats.u.yaml
--------------------------------------------------
Content of jamovi\jjbarstats.u.yaml:
title: Bar Charts
name: jjbarstats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variable
        children:
          - type: VariablesListBox
            name: dep
            isTarget: true
      - type: TargetLayoutBox
        label: Grouping Variable
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Data
    collapsed: false
    children:
      - type: Label
        label: Data
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: excl
  - type: CollapseBox
    label: Analysis
    collapsed: false
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics
              - type: CheckBox
                name: pairwisecomparisons
                children:
                  - type: ComboBox
                    name: pairwisedisplay
                    enable: (pairwisecomparisons)
                  - type: ComboBox
                    name: padjustmethod
                    enable: (pairwisecomparisons)
  - type: CollapseBox
    label: Plot
    collapsed: false
    children:
      - type: Label
        label: Plot
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: originaltheme



File: jamovi\jjbetweenstats.a.yaml
--------------------------------------------------
Content of jamovi\jjbetweenstats.a.yaml:
---
name:  jjbetweenstats
title: Box-Violin Plots to Compare Between Groups
menuGroup: JJStatsPlot
menuSubgroup: 'Categorical vs Continuous'
menuSubtitle: 'Independent Samples'
version: '1.0.0'
jas: '1.2'


description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggbetweenstats and
    #     ggstatsplot::grouped_ggbetweenstats to generate Violin Plots.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: Dependent Variables
      type: Variables
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: group
      title: Grouping Variable
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]
      default: NULL


    - name: centralityplotting
      title: Show Centrality
      type: Bool
      default: false

    - name: centralitytype
      title: 'Centrality Type'
      type: List
      options:
        - title: mean (parameteric)
          name: parameteric
        - title: median (nonparametric)
          name: nonparametric
        - title: robust (trimmed mean)
          name: robust
        - title: bayes (MAP estimator)
          name: bayes 
      default: parameteric


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric

    - name: pairwisecomparisons
      title: Pairwise Comparisons
      type: Bool
      default: false

    - name: pairwisedisplay
      title: 'Pairwise Display'
      type: List
      options:
        - title: significant
          name: significant
        - title: non-significant
          name: non-significant
        - title: everything
          name: everything
      default: significant

    - name: padjustmethod
      title: 'Adjustment Method'
      type: List
      options:
        - title: holm
          name: holm
        - title: hochberg
          name: hochberg
        - title: hommel
          name: hommel
        - title: bonferroni
          name: bonferroni
        - title: BH
          name: BH
        - title: BY
          name: BY
        - title: fdr
          name: fdr
        - title: none
          name: none
      default: holm

    - name: effsizetype
      title: 'Effect Size Needed for Parametric Tests'
      type: List
      options:
        - title: biased
          name: biased
        - title: unbiased
          name: unbiased
        - title: eta
          name: eta
        - title: omega
          name: omega
      default: biased

    - name: violin
      title: Violin Plot
      type: Bool
      default: true

    - name: boxplot
      title: Box Plot
      type: Bool
      default: true

    - name: point
      title: Points
      type: Bool
      default: true

    - name: mytitle
      title: Title
      type: String
      default: 'Within Group Comparison'

    - name: xtitle
      title: X-Title
      type: String
      default: ''

    - name: ytitle
      title: Y-Title
      type: String
      default: ''

    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false

    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true

...

# ggbetweenstats(
#   data,
#   x,
#   y,
#   plot.type = "boxviolin",
#   type = "parametric",
#   pairwise.comparisons = TRUE,
#   pairwise.display = "significant",
#   p.adjust.method = "holm",
#   effsize.type = "unbiased",
#   bf.prior = 0.707,
#   bf.message = TRUE,
#   results.subtitle = TRUE,
#   xlab = NULL,
#   ylab = NULL,
#   caption = NULL,
#   title = NULL,
#   subtitle = NULL,
#   sample.size.label = TRUE,
#   k = 2L,
#   var.equal = FALSE,
#   conf.level = 0.95,
#   nboot = 100L,
#   tr = 0.1,
#   mean.plotting = TRUE,
#   mean.ci = FALSE,
#   mean.point.args = list(size = 5, color = "darkred"),
#   mean.label.args = list(size = 3),
#   notch = FALSE,
#   notchwidth = 0.5,
#   outlier.tagging = FALSE,
#   outlier.label = NULL,
#   outlier.coef = 1.5,
#   outlier.shape = 19,
#   outlier.color = "black",
#   outlier.label.args = list(size = 3),
#   outlier.point.args = list(),
#   point.args = list(position = ggplot2::position_jitterdodge(dodge.width = 0.6), alpha
#     = 0.4, size = 3, stroke = 0),
#   violin.args = list(width = 0.5, alpha = 0.2),
#   ggsignif.args = list(textsize = 3, tip_length = 0.01),
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   package = "RColorBrewer",
#   palette = "Dark2",
#   ggplot.component = NULL,
#   output = "plot",
#   ...
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The grouping variable from the dataframe data.
#
# y
# The response (a.k.a. outcome or dependent) variable from the dataframe data.
#
# plot.type
# Character describing the type of plot. Currently supported plots are "box" (for pure boxplots), "violin" (for pure violin plots), and "boxviolin" (for a combination of box and violin plots; default).
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# pairwise.comparisons
# Logical that decides whether pairwise comparisons are to be displayed (default: TRUE). Please note that only significant comparisons will be shown by default. To change this behavior, select appropriate option with pairwise.display argument. The pairwise comparison dataframes are prepared using the pairwiseComparisons::pairwise_comparisons function. For more details about pairwise comparisons, see the documentation for that function.
#
# pairwise.display
# Decides which pairwise comparisons to display. Available options are "significant" (abbreviation accepted: "s") or "non-significant" (abbreviation accepted: "ns") or "everything"/"all". The default is "significant". You can use this argument to make sure that your plot is not uber-cluttered when you have multiple groups being compared and scores of pairwise comparisons being displayed.
#
# p.adjust.method
# Adjustment method for p-values for multiple comparisons. Possible methods are: "holm" (default), "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none".
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "biased" (equivalent to "d" for Cohen's d for t-test; "eta" for partial eta-squared for anova) or "unbiased" (equivalent to "g" Hedge's g for t-test; "omega" for partial omega-squared for anova)).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# xlab, ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# caption
# The text for the plot caption.
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable x (Default: TRUE).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# var.equal
# a logical variable indicating whether to treat the variances in the samples as equal. If TRUE, then a simple F test for the equality of means in a one-way analysis of variance is performed. If FALSE, an approximate method of Welch (1951) is used, which generalizes the commonly known 2-sample Welch test to the case of arbitrarily many samples.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# tr
# Trim level for the mean when carrying out robust tests. If you get error stating "Standard error cannot be computed because of Winsorized variance of 0 (e.g., due to ties). Try to decrease the trimming level.", try to play around with the value of tr, which is by default set to 0.1. Lowering the value might help.
#
# mean.plotting
# Logical that decides whether mean is to be highlighted and its value to be displayed (Default: TRUE).
#
# mean.ci
# Logical that decides whether 95% confidence interval for mean is to be displayed (Default: FALSE).
#
# mean.point.args, mean.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# notch
# A logical. If FALSE (default), a standard box plot will be displayed. If TRUE, a notched box plot will be used. Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different. In a notched box plot, the notches extend 1.58 * IQR / sqrt(n). This gives a roughly 95% confidence interval for comparing medians. IQR: Inter-Quartile Range.
#
# notchwidth
# For a notched box plot, width of the notch relative to the body (default 0.5).
#
# outlier.tagging
# Decides whether outliers should be tagged (Default: FALSE).
#
# outlier.label
# Label to put on the outliers that have been tagged. This can't be the same as x argument.
#
# outlier.coef
# Coefficient for outlier detection using Tukey's method. With Tukey's method, outliers are below (1st Quartile) or above (3rd Quartile) outlier.coef times the Inter-Quartile Range (IQR) (Default: 1.5).
#
# outlier.shape
# Hiding the outliers can be achieved by setting outlier.shape = NA. Importantly, this does not remove the outliers, it only hides them, so the range calculated for the y-axis will be the same with outliers shown and outliers hidden.
#
# outlier.color
# Default aesthetics for outliers (Default: "black").
#
# outlier.point.args, outlier.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# point.args
# A list of additional aesthetic arguments to be passed to the geom_point displaying the raw data.
#
# violin.args
# A list of additional aesthetic arguments to be passed to the geom_violin.
#
# ggsignif.args
# A list of additional aesthetic arguments to be passed to ggsignif::geom_signif.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package, palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
#
#
# grouped_ggbetweenstats(
#   data,
#   x,
#   y,
#   grouping.var,
#   outlier.label = NULL,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The grouping variable from the dataframe data.
#
# y
# The response (a.k.a. outcome or dependent) variable from the dataframe data.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# outlier.label
# Label to put on the outliers that have been tagged. This can't be the same as x argument.
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
# ...
# Arguments passed on to ggbetweenstats
#
# plot.type
# Character describing the type of plot. Currently supported plots are "box" (for pure boxplots), "violin" (for pure violin plots), and "boxviolin" (for a combination of box and violin plots; default).
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# pairwise.comparisons
# Logical that decides whether pairwise comparisons are to be displayed (default: TRUE). Please note that only significant comparisons will be shown by default. To change this behavior, select appropriate option with pairwise.display argument. The pairwise comparison dataframes are prepared using the pairwiseComparisons::pairwise_comparisons function. For more details about pairwise comparisons, see the documentation for that function.
#
# p.adjust.method
# Adjustment method for p-values for multiple comparisons. Possible methods are: "holm" (default), "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none".
#
# pairwise.display
# Decides which pairwise comparisons to display. Available options are "significant" (abbreviation accepted: "s") or "non-significant" (abbreviation accepted: "ns") or "everything"/"all". The default is "significant". You can use this argument to make sure that your plot is not uber-cluttered when you have multiple groups being compared and scores of pairwise comparisons being displayed.
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable x (Default: TRUE).
#
# notch
# A logical. If FALSE (default), a standard box plot will be displayed. If TRUE, a notched box plot will be used. Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different. In a notched box plot, the notches extend 1.58 * IQR / sqrt(n). This gives a roughly 95% confidence interval for comparing medians. IQR: Inter-Quartile Range.
#
# notchwidth
# For a notched box plot, width of the notch relative to the body (default 0.5).
#
# outlier.color
# Default aesthetics for outliers (Default: "black").
#
# outlier.tagging
# Decides whether outliers should be tagged (Default: FALSE).
#
# outlier.shape
# Hiding the outliers can be achieved by setting outlier.shape = NA. Importantly, this does not remove the outliers, it only hides them, so the range calculated for the y-axis will be the same with outliers shown and outliers hidden.
#
# outlier.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# outlier.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# outlier.coef
# Coefficient for outlier detection using Tukey's method. With Tukey's method, outliers are below (1st Quartile) or above (3rd Quartile) outlier.coef times the Inter-Quartile Range (IQR) (Default: 1.5).
#
# mean.plotting
# Logical that decides whether mean is to be highlighted and its value to be displayed (Default: TRUE).
#
# mean.ci
# Logical that decides whether 95% confidence interval for mean is to be displayed (Default: FALSE).
#
# point.args
# A list of additional aesthetic arguments to be passed to the geom_point displaying the raw data.
#
# violin.args
# A list of additional aesthetic arguments to be passed to the geom_violin.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# mean.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# mean.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# ggsignif.args
# A list of additional aesthetic arguments to be passed to ggsignif::geom_signif.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "biased" (equivalent to "d" for Cohen's d for t-test; "eta" for partial eta-squared for anova) or "unbiased" (equivalent to "g" Hedge's g for t-test; "omega" for partial omega-squared for anova)).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# var.equal
# a logical variable indicating whether to treat the variances in the samples as equal. If TRUE, then a simple F test for the equality of means in a one-way analysis of variance is performed. If FALSE, an approximate method of Welch (1951) is used, which generalizes the commonly known 2-sample Welch test to the case of arbitrarily many samples.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# tr
# Trim level for the mean when carrying out robust tests. If you get error stating "Standard error cannot be computed because of Winsorized variance of 0 (e.g., due to ties). Try to decrease the trimming level.", try to play around with the value of tr, which is by default set to 0.1. Lowering the value might help.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.


File: jamovi\jjbetweenstats.r.yaml
--------------------------------------------------
Content of jamovi\jjbetweenstats.r.yaml:
---
name:  jjbetweenstats
title: Violin Plots to Compare Between Groups
jrs:   '1.1'

clearWith:
    - dep
    - group
    - grvar
    - originaltheme
    - typestatistics
    - excl



items:

    - name:  todo
      title: To Do
      type:  Html

    - name: plot2
      title: '`Violin Plot by ${grvar}`'
      # title: '`${group} - {dep} by {grvar}`'
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

    - name: plot
      title: 'Violin Plot'
      # title: '`${group} - {dep}`'
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot
      requiresData: true


    # - name:  mydataview
    #   title: mydataview
    #   type:  Preformatted



refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjbetweenstats.u.yaml
--------------------------------------------------
Content of jamovi\jjbetweenstats.u.yaml:
title: Violin Plots to Compare Between Groups
name: jjbetweenstats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variables
        children:
          - type: VariablesListBox
            name: dep
            isTarget: true
      - type: TargetLayoutBox
        label: Grouping Variable
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            children:
              - type: ComboBox
                name: typestatistics
              - type: ComboBox
                name: effsizetype
      - type: Label
        label: Pairwise Comparisons
        fitToGrid: true
        children:
          - type: LayoutBox
            children:
              - type: CheckBox
                name: pairwisecomparisons
                children:
                  - type: ComboBox
                    name: pairwisedisplay
                    enable: (pairwisecomparisons)
                  - type: ComboBox
                    name: padjustmethod
                    enable: (pairwisecomparisons)
  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Theme
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: originaltheme
      - type: Label
        label: Plot Features
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: centralityplotting
                children:
                  - type: ComboBox
                    name: centralitytype
                    enable: (centralityplotting)
      - type: Label
        label: Plot Type
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: violin
              - type: CheckBox
                name: boxplot
              - type: CheckBox
                name: point
      - type: Label
        label: Plot Labels
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: TextBox
                name: mytitle
                format: string
                width: large
              - type: TextBox
                name: xtitle
                format: string
                width: large
              - type: TextBox
                name: ytitle
                format: string
                width: large



File: jamovi\jjcorrmat.a.yaml
--------------------------------------------------
Content of jamovi\jjcorrmat.a.yaml:
---
name:  jjcorrmat
title: Correlation Matrix
menuGroup: JJStatsPlot
menuSubgroup: Continuous vs Continuous
# menuSubtitle: Correlation Matrix
version: '1.0.0'
jas: '1.2'



description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggcorrmat and
    #     ggstatsplot::grouped_ggcorrmat to generate Correlation Matrix.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: Dependent Variables
      type: Variables
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]



    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric


...

#
# ggcorrmat(
#   data,
#   cor.vars = NULL,
#   cor.vars.names = NULL,
#   output = "plot",
#   matrix.type = "full",
#   matrix.method = "square",
#   type = "parametric",
#   beta = 0.1,
#   k = 2L,
#   sig.level = 0.05,
#   conf.level = 0.95,
#   bf.prior = 0.707,
#   p.adjust.method = "none",
#   pch = "cross",
#   ggcorrplot.args = list(outline.color = "black"),
#   package = "RColorBrewer",
#   palette = "Dark2",
#   colors = c("#E69F00", "white", "#009E73"),
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   ggplot.component = NULL,
#   title = NULL,
#   subtitle = NULL,
#   caption = NULL,
#   ...
# )
# Arguments
# data
# Dataframe from which variables specified are preferentially to be taken.
#
# cor.vars
# List of variables for which the correlation matrix is to be computed and visualized. If NULL (default), all numeric variables from data will be used.
#
# cor.vars.names
# Optional list of names to be used for cor.vars. The names should be entered in the same order.
#
# output
# Character that decides expected output from this function. If "plot", the visualization matrix will be returned. If "dataframe" (or literally anything other than "plot"), a dataframe containing all details from statistical analyses (e.g., correlation coefficients, statistic values, p-values, no. of observations, etc.) will be returned.
#
# matrix.type
# Character, "full" (default), "upper" or "lower", display full matrix, lower triangular or upper triangular matrix.
#
# matrix.method
# The visualization method of correlation matrix to be used. Allowed values are "square" (default) or "circle".
#
# type
# Type of association between paired samples required (""parametric": Pearson's product moment correlation coefficient" or ""nonparametric": Spearman's rho" or ""robust": percentage bend correlation coefficient" or ""bayes": Bayes Factor for Pearson's r"). Corresponding abbreviations are also accepted: "p" (for parametric/pearson), "np" (nonparametric/spearman), "r" (robust), "bf" (for bayes factor), resp.
#
# beta
# bending constant (Default: 0.1). For more, see WRS2::pbcor().
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# sig.level
# Significance level (Default: 0.05). If the p-value in p-value matrix is bigger than sig.level, then the corresponding correlation coefficient is regarded as insignificant and flagged as such in the plot. Relevant only when output = "plot".
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# p.adjust.method
# What adjustment for multiple tests should be used? ("holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none"). See stats::p.adjust for details about why to use "holm" rather than "bonferroni"). Default is "none". If adjusted p-values are displayed in the visualization of correlation matrix, the adjusted p-values will be used for the upper triangle, while unadjusted p-values will be used for the lower triangle of the matrix.
#
# pch
# Decides the point shape to be used for insignificant correlation coefficients (only valid when insig = "pch"). Default: pch = "cross".
#
# ggcorrplot.args
# A list of additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used by ggstatsplot: corr, method, p.mat, sig.level, ggtheme, colors, matrix.type, lab, pch, legend.title, digits.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# colors
# A vector of 3 colors for low, mid, and high correlation values. If set to NULL, manual specification of colors will be turned off and 3 colors from the specified palette from package will be selected.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
#
# grouped_ggcorrmat(
#   data,
#   cor.vars = NULL,
#   cor.vars.names = NULL,
#   grouping.var,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# Dataframe from which variables specified are preferentially to be taken.
#
# cor.vars
# List of variables for which the correlation matrix is to be computed and visualized. If NULL (default), all numeric variables from data will be used.
#
# cor.vars.names
# Optional list of names to be used for cor.vars. The names should be entered in the same order.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# Character that decides expected output from this function. If "plot", the visualization matrix will be returned. If "dataframe" (or literally anything other than "plot"), a dataframe containing all details from statistical analyses (e.g., correlation coefficients, statistic values, p-values, no. of observations, etc.) will be returned.
#
# ...
# Arguments passed on to ggcorrmat
#
# matrix.type
# Character, "full" (default), "upper" or "lower", display full matrix, lower triangular or upper triangular matrix.
#
# matrix.method
# The visualization method of correlation matrix to be used. Allowed values are "square" (default) or "circle".
#
# sig.level
# Significance level (Default: 0.05). If the p-value in p-value matrix is bigger than sig.level, then the corresponding correlation coefficient is regarded as insignificant and flagged as such in the plot. Relevant only when output = "plot".
#
# p.adjust.method
# What adjustment for multiple tests should be used? ("holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none"). See stats::p.adjust for details about why to use "holm" rather than "bonferroni"). Default is "none". If adjusted p-values are displayed in the visualization of correlation matrix, the adjusted p-values will be used for the upper triangle, while unadjusted p-values will be used for the lower triangle of the matrix.
#
# colors
# A vector of 3 colors for low, mid, and high correlation values. If set to NULL, manual specification of colors will be turned off and 3 colors from the specified palette from package will be selected.
#
# pch
# Decides the point shape to be used for insignificant correlation coefficients (only valid when insig = "pch"). Default: pch = "cross".
#
# ggcorrplot.args
# A list of additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used by ggstatsplot: corr, method, p.mat, sig.level, ggtheme, colors, matrix.type, lab, pch, legend.title, digits.
#
# type
# Type of association between paired samples required (""parametric": Pearson's product moment correlation coefficient" or ""nonparametric": Spearman's rho" or ""robust": percentage bend correlation coefficient" or ""bayes": Bayes Factor for Pearson's r"). Corresponding abbreviations are also accepted: "p" (for parametric/pearson), "np" (nonparametric/spearman), "r" (robust), "bf" (for bayes factor), resp.
#
# beta
# bending constant (Default: 0.1). For more, see WRS2::pbcor().
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.
#


File: jamovi\jjcorrmat.r.yaml
--------------------------------------------------
Content of jamovi\jjcorrmat.r.yaml:
---
name:  jjcorrmat
title: Correlation Matrix
jrs:   '1.1'

clearWith:
    - dep
    - grvar
    - excl
    - originaltheme
    - typestatistics


items:

    - name:  todo
      title: To Do
      type:  Html


    - name: plot2
      title: Chart
      type: Image
      width:  800
      height: 600
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

    - name: plot
      title: Chart
      type: Image
      width:  800
      height: 600
      renderFun: .plot
      requiresData: true



refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjcorrmat.u.yaml
--------------------------------------------------
Content of jamovi\jjcorrmat.u.yaml:
title: Correlation Matrix
name: jjcorrmat
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variables
        children:
          - type: VariablesListBox
            name: dep
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics



File: jamovi\jjdotplotstats.a.yaml
--------------------------------------------------
Content of jamovi\jjdotplotstats.a.yaml:
---
name:  jjdotplotstats
title: Dot Chart
menuGroup: JJStatsPlot
menuSubgroup: Categorical vs Continuous
# menuSubtitle: Dot Chart
version: '1.0.0'
jas: '1.2'



description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggdotplotstats and
    #     ggstatsplot::grouped_ggdotplotstats to generate Dot Charts.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: Dependent Variable
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]


    - name: group
      title: Grouping Variable
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric

    - name: effsizetype
      title: 'Effect Size Needed for Parametric Tests'
      type: List
      options:
        - title: biased
          name: biased
        - title: unbiased
          name: unbiased
        - title: eta
          name: eta
        - title: omega
          name: omega
      default: biased


    - name: centralityplotting
      title: Show Centrality
      type: Bool
      default: false

    - name: centralitytype
      title: 'Centrality Type'
      type: List
      options:
        - title: mean (parameteric)
          name: parameteric
        - title: median (nonparametric)
          name: nonparametric
        - title: robust (trimmed mean)
          name: robust
        - title: bayes (MAP estimator)
          name: bayes 
      default: parameteric

    - name: mytitle
      title: Title
      type: String
      default: ''

    - name: xtitle
      title: X-Title
      type: String
      default: ''

    - name: ytitle
      title: Y-Title
      type: String
      default: ''


    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false


    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true

...

# ggdotplotstats(
#   data,
#   x,
#   y,
#   xlab = NULL,
#   ylab = NULL,
#   title = NULL,
#   subtitle = NULL,
#   caption = NULL,
#   type = "parametric",
#   test.value = 0,
#   bf.prior = 0.707,
#   bf.message = TRUE,
#   effsize.type = "g",
#   conf.level = 0.95,
#   nboot = 100,
#   k = 2,
#   results.subtitle = TRUE,
#   point.args = list(color = "black", size = 3, shape = 16),
#   test.k = 0,
#   test.value.line = FALSE,
#   test.value.line.args = list(size = 1),
#   test.value.label.args = list(size = 3),
#   centrality.parameter = "mean",
#   centrality.k = 2,
#   centrality.line.args = list(color = "blue", size = 1),
#   centrality.label.args = list(color = "blue", size = 3),
#   ggplot.component = NULL,
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   output = "plot",
#   ...
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# A numeric variable from the dataframe data.
#
# y
# Label or grouping variable.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x- and y- axis variables, respectively (Defaults: "regression coefficient" and "term").
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# test.value
# A number specifying the value of the null hypothesis (Default: 0).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "d" (for Cohen's d) or "g" (for Hedge's g).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# point.args
# A list of additional aesthetic arguments passed to geom_point.
#
# test.k
# Integer denoting the number of decimal places expected for test.value label. (Default: 0 ).
#
# test.value.line
# Logical that decides whether a line corresponding to the test.value should be superimposed on the plot.
#
# test.value.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# test.value.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# centrality.parameter
# Decides which measure of central tendency ("mean" or "median") is to be displayed as a vertical line. To not show any parameter, set this to "none".
#
# centrality.k
# Integer denoting the number of decimal places expected for centrality parameter label. (Default: 2).
#
# centrality.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# centrality.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# output
# If "expression", will return expression with statistical details, while "dataframe" will return a dataframe containing the results.
#
#
#
# grouped_ggdotplotstats(
#   data,
#   x,
#   y,
#   grouping.var,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# A numeric variable from the dataframe data.
#
# y
# Label or grouping variable.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# If "expression", will return expression with statistical details, while "dataframe" will return a dataframe containing the results.
#
# ...
# Arguments passed on to ggdotplotstats
#
# point.args
# A list of additional aesthetic arguments passed to geom_point.
#
# test.value
# A number specifying the value of the null hypothesis (Default: 0).
#
# test.k
# Integer denoting the number of decimal places expected for test.value label. (Default: 0 ).
#
# test.value.line
# Logical that decides whether a line corresponding to the test.value should be superimposed on the plot.
#
# test.value.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# test.value.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# centrality.parameter
# Decides which measure of central tendency ("mean" or "median") is to be displayed as a vertical line. To not show any parameter, set this to "none".
#
# centrality.k
# Integer denoting the number of decimal places expected for centrality parameter label. (Default: 2).
#
# centrality.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# centrality.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "d" (for Cohen's d) or "g" (for Hedge's g).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# ylab
# Labels for x- and y- axis variables, respectively (Defaults: "regression coefficient" and "term").
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.
#
#
#
# grouped_ggdotplotstats(
#   data,
#   x,
#   y,
#   grouping.var,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# A numeric variable from the dataframe data.
#
# y
# Label or grouping variable.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# If "expression", will return expression with statistical details, while "dataframe" will return a dataframe containing the results.
#
# ...
# Arguments passed on to ggdotplotstats
#
# point.args
# A list of additional aesthetic arguments passed to geom_point.
#
# test.value
# A number specifying the value of the null hypothesis (Default: 0).
#
# test.k
# Integer denoting the number of decimal places expected for test.value label. (Default: 0 ).
#
# test.value.line
# Logical that decides whether a line corresponding to the test.value should be superimposed on the plot.
#
# test.value.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# test.value.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# centrality.parameter
# Decides which measure of central tendency ("mean" or "median") is to be displayed as a vertical line. To not show any parameter, set this to "none".
#
# centrality.k
# Integer denoting the number of decimal places expected for centrality parameter label. (Default: 2).
#
# centrality.line.args
# A list of additional aesthetic arguments to be passed to the geom_line used to display the lines corresponding to the centrality parameter and test value.
#
# centrality.label.args
# A list of additional aesthetic arguments to be passed to the geom_label used to display the label corresponding to the centrality parameter and test value.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "d" (for Cohen's d) or "g" (for Hedge's g).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# ylab
# Labels for x- and y- axis variables, respectively (Defaults: "regression coefficient" and "term").
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.



File: jamovi\jjdotplotstats.r.yaml
--------------------------------------------------
Content of jamovi\jjdotplotstats.r.yaml:
---
name:  jjdotplotstats
title: Dot Chart
jrs:   '1.1'


clearWith:
    - dep
    - group
    - grvar
    - excl
    - originaltheme
    - typestatistics



items:

    - name:  todo
      title: To Do
      type:  Html





    - name: plot2
      title: '`${group} - {dep} by {grvar}`'
      type: Image
      width:  800
      height: 300
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

    - name: plot
      title: '`${group} - {dep}`'
      type: Image
      width:  400
      height: 300
      renderFun: .plot
      requiresData: true


refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjdotplotstats.u.yaml
--------------------------------------------------
Content of jamovi\jjdotplotstats.u.yaml:
title: Dot Chart
name: jjdotplotstats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variable
        children:
          - type: VariablesListBox
            name: dep
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Grouping Variable
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics
              - type: ComboBox
                name: effsizetype
  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Theme
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: originaltheme
      - type: Label
        label: Plot Features
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: centralityplotting
                children:
                  - type: ComboBox
                    name: centralitytype
                    enable: (centralityplotting)
      - type: Label
        label: Plot Labels
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: TextBox
                name: mytitle
                format: string
                width: large
              - type: TextBox
                name: xtitle
                format: string
                width: large
              - type: TextBox
                name: ytitle
                format: string
                width: large



File: jamovi\jjhistostats.a.yaml
--------------------------------------------------
Content of jamovi\jjhistostats.a.yaml:
---
name:  jjhistostats
title: Histogram
menuGroup: JJStatsPlot
menuSubgroup: Continuous
# menuSubtitle: Histogram
version: '1.0.0'
jas: '1.2'


description:
    main: |
        'Wrapper Function for ggstatsplot::gghistostats and
        ggstatsplot::grouped_gghistostats to generate Histogram.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.

    - name: dep
      title: Variables
      type: Variables
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

# Data ----


# Analysis ----


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric



# Plot ----


    - name: centralityline
      title: Centrality Line
      type: Bool
      default: true

    - name: changebinwidth
      title: Change Bin Width
      type: Bool
      default: false

    - name: binwidth
      title: Bin Width (Default is max(x) - min(x) / sqrt(N))
      type: Number
      default: 1.1




    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true

    - name: normalcurve
      title: Normal Curve
      type: Bool
      default: false



...



File: jamovi\jjhistostats.r.yaml
--------------------------------------------------
Content of jamovi\jjhistostats.r.yaml:
---
name:  jjhistostats
title: Histogram
jrs:   '1.1'

# clearWith:
#     - dep
#     - group
#     - grvar
#     - excl
#     - originaltheme
#     - typestatistics
#     - changebinwidth
#     - binwidth
#     - barmeasure
#     - centralityparameter

clearWith:
    - '*'


items:

    - name:  todo
      title: To Do
      type:  Html


    # - name:  mydataview
    #   title: mydataview
    #   type:  Preformatted

    # - name:  mydataview2
    #   title: mydataview2
    #   type:  Preformatted

      # title: '` ${group} - {dep} by {grvar}`'

    - name: plot2
      title: '`Histogram Splitted by {grvar}`'
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

      # title: '` ${dep}`'


    - name: plot
      title: Histogram
      type: Image
      # width:  800
      # height: 600
      renderFun: .plot
      requiresData: true

    # - name:  e_stats
    #   title: e_stats
    #   type:  Preformatted

    # - name:  e_subtitle
    #   title: e_subtitle
    #   type:  Preformatted

    # - name:  e_caption
    #   title: e_caption
    #   type:  Preformatted

refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjhistostats.u.yaml
--------------------------------------------------
Content of jamovi\jjhistostats.u.yaml:
title: Histogram
name: jjhistostats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Variables
        children:
          - type: VariablesListBox
            name: dep
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics
  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Plot
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: normalcurve
              - type: CheckBox
                name: centralityline
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: changebinwidth
                children:
                  - type: TextBox
                    name: binwidth
                    format: number
                    enable: (changebinwidth)


File: jamovi\jjpiestats.a.yaml
--------------------------------------------------
Content of jamovi\jjpiestats.a.yaml:
---
name:  jjpiestats
title: Pie Charts
menuGroup: JJStatsPlot
menuSubgroup: 'Categorical vs Categorical'
# menuSubtitle: 'Pie Charts'
version: '1.0.0'
jas: '1.2'



description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggpiestats and
    #     ggstatsplot::grouped_ggpiestats to generate Pie Charts.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: Dependent Variable
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: group
      title: 'Grouping Variable: (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric


    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false

    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true


...

# ggpiestats(
#   data,
#   x,
#   y = NULL,
#   counts = NULL,
#   ratio = NULL,
#   paired = FALSE,
#   results.subtitle = TRUE,
#   label = "percentage",
#   label.args = list(direction = "both"),
#   label.repel = FALSE,
#   conf.level = 0.95,
#   k = 2L,
#   proportion.test = TRUE,
#   perc.k = 0,
#   bf.message = TRUE,
#   sampling.plan = "indepMulti",
#   fixed.margin = "rows",
#   prior.concentration = 1,
#   title = NULL,
#   subtitle = NULL,
#   caption = NULL,
#   legend.title = NULL,
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   package = "RColorBrewer",
#   palette = "Dark2",
#   ggplot.component = NULL,
#   output = "plot",
#   ...
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The variable to use as the rows in the contingency table.
#
# y
# The variable to use as the columns in the contingency table. Default is NULL. If NULL, one-sample proportion test (a goodness of fit test) will be run for the x variable. Otherwise an appropriate association test will be run. This argument can not be NULL for ggbarstats function.
#
# counts
# A string naming a variable in data containing counts, or NULL if each row represents a single observation.
#
# ratio
# A vector of proportions: the expected proportions for the proportion test (should sum to 1). Default is NULL, which means the null is equal theoretical proportions across the levels of the nominal variable. This means if there are two levels this will be ratio = c(0.5,0.5) or if there are four levels this will be ratio = c(0.25,0.25,0.25,0.25), etc.
#
# paired
# Logical indicating whether data came from a within-subjects or repeated measures design study (Default: FALSE). If TRUE, McNemar's test subtitle will be returned. If FALSE, Pearson's chi-square test will be returned.
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# label
# Character decides what information needs to be displayed on the label in each pie slice. Possible options are "percentage" (default), "counts", "both".
#
# label.args
# Additional aesthetic arguments that will be passed to geom_label.
#
# label.repel
# Whether labels should be repelled using ggrepel package. This can be helpful in case the labels are overlapping.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# proportion.test
# Decides whether proportion test for x variable is to be carried out for each level of y (Default: TRUE).
#
# perc.k
# Numeric that decides number of decimal places for percentage labels (Default: 0).
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# sampling.plan
# Character describing the sampling plan. Possible options are "indepMulti" (independent multinomial; default), "poisson", "jointMulti" (joint multinomial), "hypergeom" (hypergeometric). For more, see ?BayesFactor::contingencyTableBF().
#
# fixed.margin
# For the independent multinomial sampling plan, which margin is fixed ("rows" or "cols"). Defaults to "rows".
#
# prior.concentration
# Specifies the prior concentration parameter, set to 1 by default. It indexes the expected deviation from the null hypothesis under the alternative, and corresponds to Gunel and Dickey's (1974) "a" parameter.
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# legend.title
# Title text for the legend.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
#
#
#
# grouped_ggpiestats(
#   data,
#   x,
#   y = NULL,
#   counts = NULL,
#   grouping.var,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The variable to use as the rows in the contingency table.
#
# y
# The variable to use as the columns in the contingency table. Default is NULL. If NULL, one-sample proportion test (a goodness of fit test) will be run for the x variable. Otherwise an appropriate association test will be run. This argument can not be NULL for ggbarstats function.
#
# counts
# A string naming a variable in data containing counts, or NULL if each row represents a single observation.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
# ...
# Arguments passed on to ggpiestats
#
# proportion.test
# Decides whether proportion test for x variable is to be carried out for each level of y (Default: TRUE).
#
# perc.k
# Numeric that decides number of decimal places for percentage labels (Default: 0).
#
# label
# Character decides what information needs to be displayed on the label in each pie slice. Possible options are "percentage" (default), "counts", "both".
#
# label.args
# Additional aesthetic arguments that will be passed to geom_label.
#
# label.repel
# Whether labels should be repelled using ggrepel package. This can be helpful in case the labels are overlapping.
#
# legend.title
# Title text for the legend.
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# ratio
# A vector of proportions: the expected proportions for the proportion test (should sum to 1). Default is NULL, which means the null is equal theoretical proportions across the levels of the nominal variable. This means if there are two levels this will be ratio = c(0.5,0.5) or if there are four levels this will be ratio = c(0.25,0.25,0.25,0.25), etc.
#
# sampling.plan
# Character describing the sampling plan. Possible options are "indepMulti" (independent multinomial; default), "poisson", "jointMulti" (joint multinomial), "hypergeom" (hypergeometric). For more, see ?BayesFactor::contingencyTableBF().
#
# fixed.margin
# For the independent multinomial sampling plan, which margin is fixed ("rows" or "cols"). Defaults to "rows".
#
# prior.concentration
# Specifies the prior concentration parameter, set to 1 by default. It indexes the expected deviation from the null hypothesis under the alternative, and corresponds to Gunel and Dickey's (1974) "a" parameter.
#
# paired
# Logical indicating whether data came from a within-subjects or repeated measures design study (Default: FALSE). If TRUE, McNemar's test subtitle will be returned. If FALSE, Pearson's chi-square test will be returned.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.
#


File: jamovi\jjpiestats.r.yaml
--------------------------------------------------
Content of jamovi\jjpiestats.r.yaml:
---
name:  jjpiestats
title: Pie Charts
jrs:   '1.1'


items:

    - name:  todo
      title: To Do
      type:  Html
      clearWith:
          - dep
          - group
          - grvar
          - direction
          - originaltheme




    - name: plot4
      title: '`${group} - {dep} by {grvar}`'
      type: Image
      width:  800
      height: 300
      renderFun: .plot4
      requiresData: true
      clearWith:
          - dep
          - group
          - grvar
          - direction
          - originaltheme
      visible: (grvar)
      # visible: (dep && group && grvar)



    # - name: plot3
    #   title: '`${dep} by {grvar}`'
    #   type: Image
    #   width:  800
    #   height: 300
    #   renderFun: .plot3
    #   requiresData: true
    #   clearWith:
    #       - dep
    #       - group
    #       - grvar
    #       - direction
    #       - originaltheme
    #   visible: (grvar)


    - name: plot2
      title: '`${group} - {dep}`'
      type: Image
      width:  400
      height: 300
      renderFun: .plot2
      requiresData: true
      clearWith:
          - dep
          - group
          - grvar
          - direction
          - originaltheme
      visible: (group)
      # visible: (dep && group)



    - name: plot1
      title: '`${dep}`'
      type: Image
      width:  400
      height: 300
      renderFun: .plot1
      requiresData: true
      clearWith:
          - dep
          - group
          - grvar
          - direction
          - originaltheme
      visible: (dep)


refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjpiestats.u.yaml
--------------------------------------------------
Content of jamovi\jjpiestats.u.yaml:
title: Pie Charts
name: jjpiestats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variable
        children:
          - type: VariablesListBox
            name: dep
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: 'Grouping Variable: (Optional)'
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics
  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Plot
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: originaltheme


File: jamovi\jjscatterstats.a.yaml
--------------------------------------------------
Content of jamovi\jjscatterstats.a.yaml:
---
name:  jjscatterstats
title: Scatter Plot
menuGroup: JJStatsPlot
menuSubgroup: Continuous vs Continuous
# menuSubtitle: Scatter Plot
version: '1.0.0'
jas: '1.2'



description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggscatterstats and
    #     ggstatsplot::grouped_ggscatterstats to generate Scatter Plot.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.


    - name: dep
      title: 'x-axis'
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: group
      title: 'y-axis'
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: grvar
      title: 'Split By (Optional)'
      type: Variable
      suggested: [ ordinal, nominal ]
      permitted: [ factor ]



    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric


    - name: mytitle
      title: Title
      type: String
      default: ''

    - name: xtitle
      title: X-Title
      type: String
      default: ''

    - name: ytitle
      title: Y-Title
      type: String
      default: ''


    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false

    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true
...



# ggscatterstats(
#   data,
#   x,
#   y,
#   type = "parametric",
#   conf.level = 0.95,
#   bf.prior = 0.707,
#   bf.message = TRUE,
#   beta = 0.1,
#   k = 2L,
#   label.var = NULL,
#   label.expression = NULL,
#   point.label.args = list(size = 3),
#   formula = y ~ x,
#   smooth.line.args = list(size = 1.5, color = "blue"),
#   method = "lm",
#   method.args = list(),
#   point.args = list(size = 3, alpha = 0.4),
#   point.width.jitter = 0,
#   point.height.jitter = 0,
#   marginal = TRUE,
#   marginal.type = "histogram",
#   margins = "both",
#   marginal.size = 5,
#   xfill = "#009E73",
#   yfill = "#D55E00",
#   xparams = list(fill = xfill),
#   yparams = list(fill = yfill),
#   results.subtitle = TRUE,
#   xlab = NULL,
#   ylab = NULL,
#   title = NULL,
#   subtitle = NULL,
#   caption = NULL,
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   ggplot.component = NULL,
#   output = "plot",
#   ...
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The column in data containing the explanatory variable to be plotted on the x-axis. Can be entered either as a character string (e.g., "x") or as a bare expression (e.g, x).
#
# y
# The column in data containing the response (outcome) variable to be plotted on the y-axis. Can be entered either as a character string (e.g., "y") or as a bare expression (e.g, y).
#
# type
# Type of association between paired samples required (""parametric": Pearson's product moment correlation coefficient" or ""nonparametric": Spearman's rho" or ""robust": percentage bend correlation coefficient" or ""bayes": Bayes Factor for Pearson's r"). Corresponding abbreviations are also accepted: "p" (for parametric/pearson), "np" (nonparametric/spearman), "r" (robust), "bf" (for bayes factor), resp.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# beta
# bending constant (Default: 0.1). For more, see WRS2::pbcor().
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# label.var
# Variable to use for points labels. Can be entered either as a character string (e.g., "var1") or as a bare expression (e.g, var1).
#
# label.expression
# An expression evaluating to a logical vector that determines the subset of data points to label. This argument can be entered either as a character string (e.g., "y < 4 & z < 20") or as a bare expression (e.g., y < 4 & z < 20).
#
# point.label.args
# A list of additional aesthetic arguments to be passed to ggrepel::geom_label_repel geom used to display the labels.
#
# formula
# Formula to use in smoothing function, eg. y ~ x, y ~ poly(x, 2), y ~ log(x). NULL by default, in which case method = NULL implies formula = y ~ x when there are fewer than 1,000 observations and formula = y ~ s(x, bs = "cs") otherwise.
#
# smooth.line.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_smooth geom used to display the regression line.
#
# method
# Smoothing method (function) to use, accepts either NULL or a character vector, e.g. "lm", "glm", "gam", "loess" or a function, e.g. MASS::rlm or mgcv::gam, stats::lm, or stats::loess. "auto" is also accepted for backwards compatibility. It is equivalent to NULL.
#
# For method = NULL the smoothing method is chosen based on the size of the largest group (across all panels). stats::loess() is used for less than 1,000 observations; otherwise mgcv::gam() is used with formula = y ~ s(x, bs = "cs") with method = "REML". Somewhat anecdotally, loess gives a better appearance, but is 𝑂(𝑁2)
# O
# (
# N
# 2
# )
#  in memory, so does not work for larger datasets.
#
# If you have fewer than 1,000 observations but want to use the same gam() model that method = NULL would use, then set method = "gam", formula = y ~ s(x, bs = "cs").
#
# method.args
# List of additional arguments passed on to the modelling function defined by method.
#
# point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point geom used to display the raw data points.
#
# point.width.jitter, point.height.jitter
# Degree of jitter in x and y direction, respectively. Defaults to 0 (0%) of the resolution of the data. Note that the jitter should not be specified in the point.args because this information will be passed to two different geoms: one displaying the points and the other displaying the labels for these points.
#
# marginal
# Decides whether ggExtra::ggMarginal() plots will be displayed; the default is TRUE.
#
# marginal.type
# Type of marginal distribution to be plotted on the axes ("histogram", "boxplot", "density", "violin", "densigram").
#
# margins
# Along which margins to show the plots. One of: [both, x, y].
#
# marginal.size
# Integer describing the relative size of the marginal plots compared to the main plot. A size of 5 means that the main plot is 5x wider and 5x taller than the marginal plots.
#
# xfill, yfill
# Character describing color fill for x and y axes marginal distributions (default: "#009E73" (for x) and "#D55E00" (for y)). Note that the defaults are colorblind-friendly.
#
# xparams
# List of extra parameters to use only for the marginal plot along the x axis.
#
# yparams
# List of extra parameters to use only for the marginal plot along the y axis.
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# title
# The text for the plot title.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# output
# If "expression", will return expression with statistical details, while "dataframe" will return a dataframe containing the results.
#
#
#
#
# grouped_ggscatterstats(
#   data,
#   x,
#   y,
#   grouping.var,
#   label.var = NULL,
#   label.expression = NULL,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The column in data containing the explanatory variable to be plotted on the x-axis. Can be entered either as a character string (e.g., "x") or as a bare expression (e.g, x).
#
# y
# The column in data containing the response (outcome) variable to be plotted on the y-axis. Can be entered either as a character string (e.g., "y") or as a bare expression (e.g, y).
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# label.var
# Variable to use for points labels. Can be entered either as a character string (e.g., "var1") or as a bare expression (e.g, var1).
#
# label.expression
# An expression evaluating to a logical vector that determines the subset of data points to label. This argument can be entered either as a character string (e.g., "y < 4 & z < 20") or as a bare expression (e.g., y < 4 & z < 20).
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# If "expression", will return expression with statistical details, while "dataframe" will return a dataframe containing the results.
#
# ...
# Arguments passed on to ggscatterstats
#
# point.label.args
# A list of additional aesthetic arguments to be passed to ggrepel::geom_label_repel geom used to display the labels.
#
# smooth.line.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_smooth geom used to display the regression line.
#
# point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point geom used to display the raw data points.
#
# marginal
# Decides whether ggExtra::ggMarginal() plots will be displayed; the default is TRUE.
#
# point.width.jitter
# Degree of jitter in x and y direction, respectively. Defaults to 0 (0%) of the resolution of the data. Note that the jitter should not be specified in the point.args because this information will be passed to two different geoms: one displaying the points and the other displaying the labels for these points.
#
# point.height.jitter
# Degree of jitter in x and y direction, respectively. Defaults to 0 (0%) of the resolution of the data. Note that the jitter should not be specified in the point.args because this information will be passed to two different geoms: one displaying the points and the other displaying the labels for these points.
#
# marginal.type
# Type of marginal distribution to be plotted on the axes ("histogram", "boxplot", "density", "violin", "densigram").
#
# marginal.size
# Integer describing the relative size of the marginal plots compared to the main plot. A size of 5 means that the main plot is 5x wider and 5x taller than the marginal plots.
#
# xfill
# Character describing color fill for x and y axes marginal distributions (default: "#009E73" (for x) and "#D55E00" (for y)). Note that the defaults are colorblind-friendly.
#
# yfill
# Character describing color fill for x and y axes marginal distributions (default: "#009E73" (for x) and "#D55E00" (for y)). Note that the defaults are colorblind-friendly.
#
# type
# Type of association between paired samples required (""parametric": Pearson's product moment correlation coefficient" or ""nonparametric": Spearman's rho" or ""robust": percentage bend correlation coefficient" or ""bayes": Bayes Factor for Pearson's r"). Corresponding abbreviations are also accepted: "p" (for parametric/pearson), "np" (nonparametric/spearman), "r" (robust), "bf" (for bayes factor), resp.
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# beta
# bending constant (Default: 0.1). For more, see WRS2::pbcor().
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# formula
# Formula to use in smoothing function, eg. y ~ x, y ~ poly(x, 2), y ~ log(x). NULL by default, in which case method = NULL implies formula = y ~ x when there are fewer than 1,000 observations and formula = y ~ s(x, bs = "cs") otherwise.
#
# method
# Smoothing method (function) to use, accepts either NULL or a character vector, e.g. "lm", "glm", "gam", "loess" or a function, e.g. MASS::rlm or mgcv::gam, stats::lm, or stats::loess. "auto" is also accepted for backwards compatibility. It is equivalent to NULL.For method = NULL the smoothing method is chosen based on the size of the largest group (across all panels). stats::loess() is used for less than 1,000 observations; otherwise mgcv::gam() is used with formula = y ~ s(x, bs = "cs") with method = "REML". Somewhat anecdotally, loess gives a better appearance, but is 𝑂(𝑁2)
# O
# (
# N
# 2
# )
#  in memory, so does not work for larger datasets.If you have fewer than 1,000 observations but want to use the same gam() model that method = NULL would use, then set method = "gam", formula = y ~ s(x, bs = "cs").
#
# method.args
# List of additional arguments passed on to the modelling function defined by method.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# caption
# The text for the plot caption.
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# margins
# Along which margins to show the plots. One of: [both, x, y].
#
# xparams
# List of extra parameters to use only for the marginal plot along the x axis.
#
# yparams
# List of extra parameters to use only for the marginal plot along the y axis.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.


File: jamovi\jjscatterstats.r.yaml
--------------------------------------------------
Content of jamovi\jjscatterstats.r.yaml:
---
name:  jjscatterstats
title: Scatter Plot
jrs:   '1.1'


clearWith:
    - dep
    - group
    - grvar
    - excl
    - originaltheme
    - typestatistics


items:

    - name:  todo
      title: To Do
      type:  Html


    - name: plot2
      title: '`${group} vs {dep} by {grvar}`'
      type: Image
      width:  1600
      height: 600
      renderFun: .plot2
      requiresData: true
      visible: (grvar)

    - name: plot
      title: '`${group} vs {dep}`'
      type: Image
      width:  800
      height: 600
      renderFun: .plot
      requiresData: true

refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjscatterstats.u.yaml
--------------------------------------------------
Content of jamovi\jjscatterstats.u.yaml:
title: Scatter Plot
name: jjscatterstats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: x-axis
        children:
          - type: VariablesListBox
            name: dep
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: y-axis
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Split By (Optional)
        children:
          - type: VariablesListBox
            name: grvar
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: ComboBox
                name: typestatistics

  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Plot
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: originaltheme
      - type: Label
        label: Plot Labels
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: TextBox
                name: mytitle
                format: string
                width: large
              - type: TextBox
                name: xtitle
                format: string
                width: large
              - type: TextBox
                name: ytitle
                format: string
                width: large

File: jamovi\jjwithinstats.a.yaml
--------------------------------------------------
Content of jamovi\jjwithinstats.a.yaml:
---
name:  jjwithinstats
title: Box-Violin Plots to Compare Within Groups
menuGroup: JJStatsPlot
menuSubgroup: 'Categorical vs Continuous'
menuSubtitle: Repeated Continuous Measurements
version: '1.0.0'
jas: '1.2'



description:
    # main: |
    #     'Wrapper Function for ggstatsplot::ggwithinstats and
    #     ggstatsplot::grouped_ggwithinstats to generate Violin Plots.'
    R:
        dontrun: true
        usage: |
            # example will be added

options:
    - name: data
      type: Data
      description:
          R: >
            The data as a data frame.

    - name: dep1
      title: First Measurement
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: dep2
      title: Second Measurement
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: dep3
      title: Third Measurement (Optional)
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: dep4
      title: Fourth Measurement (Optional)
      type: Variable
      suggested: [ continuous ]
      permitted: [ numeric ]

    - name: pointpath
      title: Show Point Path
      type: Bool
      default: false

    - name: centralitypath
      title: Centrality Path
      type: Bool
      default: false


    - name: centralityplotting
      title: Show Centrality
      type: Bool
      default: false

    - name: centralitytype
      title: 'Centrality Type'
      type: List
      options:
        - title: mean (parameteric)
          name: parameteric
        - title: median (nonparametric)
          name: nonparametric
        - title: robust (trimmed mean)
          name: robust
        - title: bayes (MAP estimator)
          name: bayes 
      default: parameteric


    - name: typestatistics
      title: 'Type of Statistic'
      type: List
      options:
        - title: Parametric
          name: parametric
        - title: Nonparametric
          name: nonparametric
        - title: Robust
          name: robust
        - title: Bayes
          name: bayes
      default: parametric

    - name: pairwisecomparisons
      title: Pairwise Comparisons
      type: Bool
      default: false

    - name: pairwisedisplay
      title: 'Pairwise Display'
      type: List
      options:
        - title: significant
          name: significant
        - title: non-significant
          name: non-significant
        - title: everything
          name: everything
      default: significant

    - name: padjustmethod
      title: 'Adjustment Method'
      type: List
      options:
        - title: holm
          name: holm
        - title: hochberg
          name: hochberg
        - title: hommel
          name: hommel
        - title: bonferroni
          name: bonferroni
        - title: BH
          name: BH
        - title: BY
          name: BY
        - title: fdr
          name: fdr
        - title: none
          name: none
      default: holm

    - name: effsizetype
      title: 'Effect Size Needed for Parametric Tests'
      type: List
      options:
        - title: biased
          name: biased
        - title: unbiased
          name: unbiased
        - title: eta
          name: eta
        - title: omega
          name: omega
      default: biased

    - name: violin
      title: Violin Plot
      type: Bool
      default: true

    - name: boxplot
      title: Box Plot
      type: Bool
      default: true

    - name: point
      title: Points
      type: Bool
      default: true

    - name: mytitle
      title: Title
      type: String
      default: 'Within Group Comparison'

    - name: xtitle
      title: X-Title
      type: String
      default: ''

    - name: ytitle
      title: Y-Title
      type: String
      default: ''

    - name: originaltheme
      title: Add GGStatsPlot Layer
      type: Bool
      default: false

    - name: resultssubtitle
      title: Statistical Results
      type: Bool
      default: true
...

# ggwithinstats(
#   data,
#   x,
#   y,
#   type = "parametric",
#   pairwise.comparisons = TRUE,
#   pairwise.display = "significant",
#   p.adjust.method = "holm",
#   effsize.type = "unbiased",
#   bf.prior = 0.707,
#   bf.message = TRUE,
#   results.subtitle = TRUE,
#   xlab = NULL,
#   ylab = NULL,
#   caption = NULL,
#   title = NULL,
#   subtitle = NULL,
#   sample.size.label = TRUE,
#   k = 2L,
#   conf.level = 0.95,
#   nboot = 100L,
#   tr = 0.1,
#   mean.plotting = TRUE,
#   mean.ci = FALSE,
#   mean.point.args = list(size = 5, color = "darkred"),
#   mean.label.args = list(size = 3),
#   point.path = TRUE,
#   point.path.args = list(alpha = 0.5, linetype = "dashed"),
#   mean.path = TRUE,
#   mean.path.args = list(color = "red", size = 1, alpha = 0.5),
#   notch = FALSE,
#   notchwidth = 0.5,
#   outlier.tagging = FALSE,
#   outlier.label = NULL,
#   outlier.coef = 1.5,
#   outlier.label.args = list(),
#   outlier.point.args = list(),
#   violin.args = list(width = 0.5, alpha = 0.2),
#   ggsignif.args = list(textsize = 3, tip_length = 0.01),
#   ggtheme = ggplot2::theme_bw(),
#   ggstatsplot.layer = TRUE,
#   package = "RColorBrewer",
#   palette = "Dark2",
#   ggplot.component = NULL,
#   output = "plot",
#   ...
# )




# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# caption
# The text for the plot caption.

# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable x (Default: TRUE).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# tr
# Trim level for the mean when carrying out robust tests. If you get error stating "Standard error cannot be computed because of Winsorized variance of 0 (e.g., due to ties). Try to decrease the trimming level.", try to play around with the value of tr, which is by default set to 0.1. Lowering the value might help.

# mean.ci
# Logical that decides whether 95% confidence interval for mean is to be displayed (Default: FALSE).
#
# mean.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# mean.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# point.path, mean.path
# Logical that decides whether individual data points and means, respectively, should be connected using geom_path. Both default to TRUE. Note that point.path argument is relevant only when there are two groups (i.e., in case of a t-test). In case of large number of data points, it is advisable to set point.path = FALSE as these lines can overwhelm the plot.
#
# mean.path.args, point.path.args
# A list of additional aesthetic arguments passed on to geom_path connecting raw data points and mean points.
#
# notch
# A logical. If FALSE (default), a standard box plot will be displayed. If TRUE, a notched box plot will be used. Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different. In a notched box plot, the notches extend 1.58 * IQR / sqrt(n). This gives a roughly 95% confidence interval for comparing medians. IQR: Inter-Quartile Range.
#
# notchwidth
# For a notched box plot, width of the notch relative to the body (default 0.5).
#
# outlier.tagging
# Decides whether outliers should be tagged (Default: FALSE).
#
# outlier.label
# Label to put on the outliers that have been tagged. This can't be the same as x argument.
#
# outlier.coef
# Coefficient for outlier detection using Tukey's method. With Tukey's method, outliers are below (1st Quartile) or above (3rd Quartile) outlier.coef times the Inter-Quartile Range (IQR) (Default: 1.5).
#
# outlier.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# outlier.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# violin.args
# A list of additional aesthetic arguments to be passed to the geom_violin.
#
# ggsignif.args
# A list of additional aesthetic arguments to be passed to ggsignif::geom_signif.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.


# grouped_ggwithinstats(
#   data,
#   x,
#   y,
#   grouping.var,
#   outlier.label = NULL,
#   title.prefix = NULL,
#   output = "plot",
#   ...,
#   plotgrid.args = list(),
#   title.text = NULL,
#   title.args = list(size = 16, fontface = "bold"),
#   caption.text = NULL,
#   caption.args = list(size = 10),
#   sub.text = NULL,
#   sub.args = list(size = 12)
# )
# Arguments
# data
# A dataframe (or a tibble) from which variables specified are to be taken. A matrix or tables will not be accepted.
#
# x
# The grouping variable from the dataframe data.
#
# y
# The response (a.k.a. outcome or dependent) variable from the dataframe data.
#
# grouping.var
# A single grouping variable (can be entered either as a bare name x or as a string "x").
#
# outlier.label
# Label to put on the outliers that have been tagged. This can't be the same as x argument.
#
# title.prefix
# Character string specifying the prefix text for the fixed plot title (name of each factor level) (Default: NULL). If NULL, the variable name entered for grouping.var will be used.
#
# output
# Character that describes what is to be returned: can be "plot" (default) or "subtitle" or "caption". Setting this to "subtitle" will return the expression containing statistical results. If you have set results.subtitle = FALSE, then this will return a NULL. Setting this to "caption" will return the expression containing details about Bayes Factor analysis, but valid only when type = "parametric" and bf.message = TRUE, otherwise this will return a NULL. For functions ggpiestats and ggbarstats, setting output = "proptest" will return a dataframe containing results from proportion tests.
#
# ...
# Arguments passed on to ggwithinstats
#
# point.path
# Logical that decides whether individual data points and means, respectively, should be connected using geom_path. Both default to TRUE. Note that point.path argument is relevant only when there are two groups (i.e., in case of a t-test). In case of large number of data points, it is advisable to set point.path = FALSE as these lines can overwhelm the plot.
#
# mean.path
# Logical that decides whether individual data points and means, respectively, should be connected using geom_path. Both default to TRUE. Note that point.path argument is relevant only when there are two groups (i.e., in case of a t-test). In case of large number of data points, it is advisable to set point.path = FALSE as these lines can overwhelm the plot.
#
# mean.path.args
# A list of additional aesthetic arguments passed on to geom_path connecting raw data points and mean points.
#
# point.path.args
# A list of additional aesthetic arguments passed on to geom_path connecting raw data points and mean points.
#
# type
# Type of statistic expected ("parametric" or "nonparametric" or "robust" or "bayes").Corresponding abbreviations are also accepted: "p" (for parametric), "np" (nonparametric), "r" (robust), or "bf"resp.
#
# pairwise.comparisons
# Logical that decides whether pairwise comparisons are to be displayed (default: TRUE). Please note that only significant comparisons will be shown by default. To change this behavior, select appropriate option with pairwise.display argument. The pairwise comparison dataframes are prepared using the pairwiseComparisons::pairwise_comparisons function. For more details about pairwise comparisons, see the documentation for that function.
#
# pairwise.display
# Decides which pairwise comparisons to display. Available options are "significant" (abbreviation accepted: "s") or "non-significant" (abbreviation accepted: "ns") or "everything"/"all". The default is "significant". You can use this argument to make sure that your plot is not uber-cluttered when you have multiple groups being compared and scores of pairwise comparisons being displayed.
#
# p.adjust.method
# Adjustment method for p-values for multiple comparisons. Possible methods are: "holm" (default), "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none".
#
# effsize.type
# Type of effect size needed for parametric tests. The argument can be "biased" (equivalent to "d" for Cohen's d for t-test; "eta" for partial eta-squared for anova) or "unbiased" (equivalent to "g" Hedge's g for t-test; "omega" for partial omega-squared for anova)).
#
# bf.prior
# A number between 0.5 and 2 (default 0.707), the prior width to use in calculating Bayes factors.
#
# bf.message
# Logical that decides whether to display Bayes Factor in favor of the null hypothesis. This argument is relevant only for parametric test (Default: TRUE).
#
# results.subtitle
# Decides whether the results of statistical tests are to be displayed as a subtitle (Default: TRUE). If set to FALSE, only the plot will be returned.
#
# xlab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# ylab
# Labels for x and y axis variables. If NULL (default), variable names for x and y will be used.
#
# caption
# The text for the plot caption.
#
# subtitle
# The text for the plot subtitle. Will work only if results.subtitle = FALSE.
#
# sample.size.label
# Logical that decides whether sample size information should be displayed for each level of the grouping variable x (Default: TRUE).
#
# k
# Number of digits after decimal point (should be an integer) (Default: k = 2L).
#
# conf.level
# Scalar between 0 and 1. If unspecified, the defaults return 95% confidence/credible intervals (0.95).
#
# nboot
# Number of bootstrap samples for computing confidence interval for the effect size (Default: 100).
#
# tr
# Trim level for the mean when carrying out robust tests. If you get error stating "Standard error cannot be computed because of Winsorized variance of 0 (e.g., due to ties). Try to decrease the trimming level.", try to play around with the value of tr, which is by default set to 0.1. Lowering the value might help.
#
# mean.plotting
# Logical that decides whether mean is to be highlighted and its value to be displayed (Default: TRUE).
#
# mean.ci
# Logical that decides whether 95% confidence interval for mean is to be displayed (Default: FALSE).
#
# mean.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# mean.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved mean value plotting.
#
# notch
# A logical. If FALSE (default), a standard box plot will be displayed. If TRUE, a notched box plot will be used. Notches are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different. In a notched box plot, the notches extend 1.58 * IQR / sqrt(n). This gives a roughly 95% confidence interval for comparing medians. IQR: Inter-Quartile Range.
#
# notchwidth
# For a notched box plot, width of the notch relative to the body (default 0.5).
#
# outlier.tagging
# Decides whether outliers should be tagged (Default: FALSE).
#
# outlier.coef
# Coefficient for outlier detection using Tukey's method. With Tukey's method, outliers are below (1st Quartile) or above (3rd Quartile) outlier.coef times the Inter-Quartile Range (IQR) (Default: 1.5).
#
# outlier.label.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# outlier.point.args
# A list of additional aesthetic arguments to be passed to ggplot2::geom_point and ggrepel::geom_label_repel geoms involved outlier value plotting.
#
# violin.args
# A list of additional aesthetic arguments to be passed to the geom_violin.
#
# ggsignif.args
# A list of additional aesthetic arguments to be passed to ggsignif::geom_signif.
#
# ggtheme
# A function, ggplot2 theme name. Default value is ggplot2::theme_bw(). Any of the ggplot2 themes, or themes from extension packages are allowed (e.g., ggthemes::theme_fivethirtyeight(), hrbrthemes::theme_ipsum_ps(), etc.).
#
# ggstatsplot.layer
# Logical that decides whether theme_ggstatsplot theme elements are to be displayed along with the selected ggtheme (Default: TRUE). theme_ggstatsplot is an opinionated theme layer that override some aspects of the selected ggtheme.
#
# package
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# palette
# Name of the package from which the given palette is to be extracted. The available palettes and packages can be checked by running View(paletteer::palettes_d_names).
#
# ggplot.component
# A ggplot component to be added to the plot prepared by ggstatsplot. This argument is primarily helpful for grouped_ variant of the current function. Default is NULL. The argument should be entered as a function.
#
# plotgrid.args
# A list of additional arguments to cowplot::plot_grid.
#
# title.text
# String or plotmath expression to be drawn as title for the combined plot.
#
# title.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# caption.text
# String or plotmath expression to be drawn as the caption for the combined plot.
#
# caption.args
# A list of additional arguments provided to title, caption and sub, resp.
#
# sub.text
# The label with which the combined plot should be annotated. Can be a plotmath expression.
#
# sub.args
# A list of additional arguments provided to title, caption and sub, resp.


File: jamovi\jjwithinstats.r.yaml
--------------------------------------------------
Content of jamovi\jjwithinstats.r.yaml:
---
name:  jjwithinstats
title: Violin Plots to Compare Within Groups
jrs:   '1.1'

clearWith:
    - dep1
    - dep2
    - dep3
    - dep4
    - typestatistics
    - originaltheme
    - excl


items:

    - name:  todo
      title: To Do
      type:  Html


    - name: plot
      title: 'Violin Plots'
      type: Image
      renderFun: .plot
      requiresData: true


    # - name:  e_stats
    #   title: e_stats
    #   type:  Preformatted

    # - name:  e_subtitle
    #   title: e_subtitle
    #   type:  Preformatted

    # - name:  e_caption
    #   title: e_caption
    #   type:  Preformatted


    # - name:  e_plot
    #   title: e_plot
    #   type:  Preformatted

    # - name:  mydataview
    #   title: mydataview
    #   type:  Preformatted


refs:
    - ggplot2
    - ggstatsplot
    - ClinicoPathJamoviModule

...


File: jamovi\jjwithinstats.u.yaml
--------------------------------------------------
Content of jamovi\jjwithinstats.u.yaml:
title: Box-Violin Plots to Compare Within Groups
name: jjwithinstats
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: First Measurement
        children:
          - type: VariablesListBox
            name: dep1
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Second Measurement
        children:
          - type: VariablesListBox
            name: dep2
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Third Measurement (Optional)
        children:
          - type: VariablesListBox
            name: dep3
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Fourth Measurement (Optional)
        children:
          - type: VariablesListBox
            name: dep4
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: Analysis
    collapsed: true
    children:
      - type: Label
        label: Analysis
        fitToGrid: true
        children:
          - type: LayoutBox
            children:
              - type: ComboBox
                name: typestatistics
              - type: ComboBox
                name: effsizetype
      - type: Label
        label: Pairwise Comparisons
        fitToGrid: true
        children:
          - type: LayoutBox
            children:
              - type: CheckBox
                name: pairwisecomparisons
                children:
                  - type: ComboBox
                    name: pairwisedisplay
                    enable: (pairwisecomparisons)
                  - type: ComboBox
                    name: padjustmethod
                    enable: (pairwisecomparisons)
  - type: CollapseBox
    label: Plot
    collapsed: true
    children:
      - type: Label
        label: Theme
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: resultssubtitle
              - type: CheckBox
                name: originaltheme
      - type: Label
        label: Plot Features
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: pointpath
              - type: CheckBox
                name: centralityplotting
                children:
                  - type: CheckBox
                    name: centralitypath
                    enable: (centralityplotting)
                  - type: ComboBox
                    name: centralitytype
                    enable: (centralityplotting)
      - type: Label
        label: Plot Type
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: violin
              - type: CheckBox
                name: boxplot
              - type: CheckBox
                name: point
      - type: Label
        label: Plot Labels
        fitToGrid: true
        children:
          - type: LayoutBox
            margin: large
            children:
              - type: TextBox
                name: mytitle
                format: string
                width: large
              - type: TextBox
                name: xtitle
                format: string
                width: large
              - type: TextBox
                name: ytitle
                format: string
                width: large





File: R\00jmv.R
--------------------------------------------------
Content of R\00jmv.R:

# This file is automatically generated, you probably don't want to edit this

.jmvrefs <- list(
    `emmeans`=list(
        `type`="software", 
        `author`="Lenth, R.", 
        `year`=2018, 
        `title`="emmeans: Estimated Marginal Means, aka Least-Squares Means", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=emmeans", 
        `url`="https://CRAN.R-project.org/package=emmeans"), 
    `afex`=list(
        `type`="software", 
        `author`="Singmann, H.", 
        `year`=2018, 
        `title`="afex: Analysis of Factorial Experiments", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=afex", 
        `url`="https://CRAN.R-project.org/package=afex"), 
    `R`=list(
        `type`="software", 
        `author`="R Core Team", 
        `year`=2018, 
        `title`="A Language and Envionment for Statistical Computing", 
        `publisher`="[Computer software]. Retrieved from https://CRAN.R-project.org/", 
        `url`="https://CRAN.R-project.org/"), 
    `BF`=list(
        `type`="software", 
        `author`="Morey, R. D., & Rouder, J. N.", 
        `year`=2018, 
        `title`="BayesFactor: Computation of Bayes Factors for Common Designs", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=BayesFactor", 
        `url`="https://CRAN.R-project.org/package=BayesFactor"), 
    `btt`=list(
        `type`="article", 
        `author`="Rouder, J. N., Speckman, P. L., Sun, D., Morey, R. D., & Iverson, G.", 
        `year`=2009, 
        `title`="Bayesian t tests for accepting and rejecting the null hypothesis", 
        `publisher`="Psychonomic Bulletin & Review", 
        `volume`=16, 
        `pages`="225-237"), 
    `car`=list(
        `type`="software", 
        `author`="Fox, J., & Weisberg, S.", 
        `year`=2018, 
        `title`="car: Companion to Applied Regression", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=car", 
        `url`="https://CRAN.R-project.org/package=car"), 
    `ggplot2`=list(
        `type`="software", 
        `author`="Wickham, H., Chang, W., Henry, L., Pedersen, T. L., Takahashi, K., Wilke, C., Woo, K., & RStudio", 
        `year`=2018, 
        `title`="ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=ggplot2", 
        `url`="https://CRAN.R-project.org/package=ggplot2"), 
    `ggridges`=list(
        `type`="software", 
        `author`="Wilke, C., & RStudio", 
        `year`=2018, 
        `title`="ggridges: Ridgeline Plots in ggplot2", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=ggridges", 
        `url`="https://CRAN.R-project.org/package=ggridges"), 
    `mvnormtest`=list(
        `type`="software", 
        `author`="Jarek, S.", 
        `year`=2012, 
        `title`="mvnormtest: Normality test for multivariate variables", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=mvnormtest", 
        `url`="https://CRAN.R-project.org/package=mvnormtest"), 
    `PMCMR`=list(
        `type`="software", 
        `author`="Pohlert, T.", 
        `year`=2018, 
        `title`="PMCMR: Calculate Pairwise Multiple Comparisons of Mean Rank Sums", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=PMCMR", 
        `url`="https://CRAN.R-project.org/package=PMCMR"), 
    `ROCR`=list(
        `type`="software", 
        `author`="Sing, T., Sander, O., Beerenwinkel, N., & Lengauer, T.", 
        `year`=2015, 
        `title`="ROCR: Visualizing the Performance of Scoring Classifiers", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=ROCR", 
        `url`="https://CRAN.R-project.org/package=ROCR"), 
    `nnet`=list(
        `type`="software", 
        `author`="Ripley, B., Venables W.", 
        `year`=2016, 
        `title`="nnet: Feed-Forward Neural Networks and Multinomial Log-Linear Models", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=nnet", 
        `url`="https://CRAN.R-project.org/package=nnet"), 
    `MASS`=list(
        `type`="software", 
        `author`="Ripley, B., Venables W., Bates, D. M., Hornik, K., Gebhardt, A., & Firth, D.", 
        `year`=2018, 
        `title`="MASS: Support Functions and Datasets for Venables and Ripley's MASS", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=MASS", 
        `url`="https://CRAN.R-project.org/package=MASS"), 
    `vcd`=list(
        `type`="software", 
        `author`="Meyer, D., Zeileis, A., Hornik, K., Gerber, F., & Friendly, M.", 
        `year`=2017, 
        `title`="vcd: Visualizing Categorical Data", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=vcd", 
        `url`="https://CRAN.R-project.org/package=vcd"), 
    `vcdExtra`=list(
        `type`="software", 
        `author`="Friendly M., Turner, H., Zeileis, A., Murdoch, D., & Firth, D.", 
        `year`=2017, 
        `title`="vcdExtra: 'vcd' Extensions and Additions", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=vcdExtra", 
        `url`="https://CRAN.R-project.org/package=vcdExtra"), 
    `exact2x2`=list(
        `type`="software", 
        `author`="Fay, M. P., Hunsberger, S. A., Nason, M., & Gabriel, E.", 
        `year`=2018, 
        `title`="exact2x2: Exact Tests and Confidence Intervals for 2x2 Tables", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=exact2x2", 
        `url`="https://CRAN.R-project.org/package=exact2x2"), 
    `psych`=list(
        `type`="software", 
        `author`="Revelle, W.", 
        `year`=2019, 
        `title`="psych: Procedures for Psychological, Psychometric, and Personality Research", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=psych", 
        `url`="https://CRAN.R-project.org/package=psych"), 
    `lavaan`=list(
        `type`="software", 
        `author`="Rosseel, Y., et al.", 
        `year`=2018, 
        `title`="lavaan: Latent Variable Analysis", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=lavaan", 
        `url`="https://CRAN.R-project.org/package=lavaan"), 
    `semPlot`=list(
        `type`="software", 
        `author`="Epskamp, S.", 
        `year`=2017, 
        `title`="semPlot: Path Diagrams and Visual Analysis of Various SEM Packages' Output", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=semPlot", 
        `url`="https://CRAN.R-project.org/package=semPlot"), 
    `ggstatsplot`=list(
        `type`="software", 
        `author`="Patil, I.", 
        `year`=2018, 
        `title`="ggstatsplot: 'ggplot2' Based Plots with Statistical Details", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=ggstatsplot", 
        `url`="https://CRAN.R-project.org/package=ggstatsplot", 
        `doi`="10.5281/zenodo.2074621"), 
    `report`=list(
        `type`="software", 
        `author`="Makowski, Dominique, L\u00FCdecke, Daniel", 
        `year`=2019, 
        `title`="The report package for R: Ensuring the use of best practices for results reporting", 
        `publisher`="[R package]. Retrieved from https://github.com/easystats/report", 
        `url`="https://github.com/easystats/report"), 
    `arsenal`=list(
        `type`="software", 
        `author`="Heinzen, E Sinnwell, J Atkinson, E Gunderson, T Dougherty, G", 
        `year`=2018, 
        `title`="arsenal: An Arsenal of 'R' Functions for Large-Scale Statistical Summaries", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=arsenal", 
        `url`="https://CRAN.R-project.org/package=arsenal"), 
    `tangram`=list(
        `type`="software", 
        `author`="Garbett, S.", 
        `year`=2018, 
        `title`="tangram: The Grammar of Tables", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=tangram", 
        `url`="https://CRAN.R-project.org/package=tangram"), 
    `irr`=list(
        `type`="software", 
        `author`="Matthias Gamer, Jim Lemon, Ian Fellows, Puspendra Singh", 
        `year`=2019, 
        `title`="Various Coefficients of Interrater Reliability and Agreement.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=irr", 
        `url`="https://CRAN.R-project.org/package=irr"), 
    `tableone`=list(
        `type`="software", 
        `author`="Kazuki, Y.", 
        `year`=2019, 
        `title`="tableone: Create 'Table 1' to Describe Baseline Characteristics", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=tableone", 
        `url`="https://CRAN.R-project.org/package=tableone"), 
    `janitor`=list(
        `type`="software", 
        `author`="Firke, S.", 
        `year`=2019, 
        `title`="janitor: Simple Tools for Examining and Cleaning Dirty Data.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=janitor", 
        `url`="https://CRAN.R-project.org/package=janitor"), 
    `finalfit`=list(
        `type`="software", 
        `author`="Ewen Harrison and Tom Drake and Riinu Ots", 
        `year`=2019, 
        `title`="finalfit: Quickly Create Elegant Regression Results Tables and Plots when Modelling", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=finalfit", 
        `url`="https://CRAN.R-project.org/package=finalfit"), 
    `caret`=list(
        `type`="software", 
        `author`="Max Kuhn", 
        `year`=2020, 
        `title`="caret: Classification and Regression Training", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=caret", 
        `url`="https://CRAN.R-project.org/package=caret"), 
    `psycho`=list(
        `type`="software", 
        `author`="Makowski, D.", 
        `year`=2018, 
        `title`="The Psycho Package: An Efficient and Publishing-Oriented Workflow for Psychological Science. Journal of Open Source Software, 3(22), 470.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=psycho.R", 
        `url`="https://CRAN.R-project.org/package=psycho.R"), 
    `survival`=list(
        `type`="software", 
        `author`="Terry M Therneau, Thomas Lumley", 
        `year`=2019, 
        `title`="survival: Survival Analysis", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=survival", 
        `url`="https://CRAN.R-project.org/package=survival"), 
    `survminer`=list(
        `type`="software", 
        `author`="Alboukadel Kassambara and Marcin Kosinski and Przemyslaw Biecek", 
        `year`=2019, 
        `title`="survminer: Drawing Survival Curves using 'ggplot2'", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=survminer", 
        `url`="https://CRAN.R-project.org/package=survminer"), 
    `ggalluvial`=list(
        `type`="software", 
        `author`="Jason Cory Brunson", 
        `year`=2019, 
        `title`="ggalluvial: Alluvial Plots in 'ggplot2'.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=ggalluvial", 
        `url`="https://CRAN.R-project.org/package=ggalluvial"), 
    `explore`=list(
        `type`="software", 
        `author`="Roland Krasser", 
        `year`=2020, 
        `title`="explore: Simplifies Exploratory Data Analysis.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=explore", 
        `url`="https://CRAN.R-project.org/package=explore"), 
    `FFTrees`=list(
        `type`="software", 
        `author`="Nathaniel Phillips, Hansjoerg Neth, Jan Woike and Wolfgang Gaissmaer", 
        `year`=2019, 
        `title`="FFTrees: Generate, Visualise, and Evaluate Fast-and-Frugal Decision Trees", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=FFTrees", 
        `url`="https://CRAN.R-project.org/package=FFTrees"), 
    `rpart`=list(
        `type`="software", 
        `author`="Terry Therneau and Beth Atkinson", 
        `year`=2019, 
        `title`="rpart: Recursive Partitioning and Regression Trees.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=rpart", 
        `url`="https://CRAN.R-project.org/package=rpart"), 
    `rpart.plot`=list(
        `type`="software", 
        `author`="Stephen Milborrow", 
        `year`=2019, 
        `title`="rpart.plot: Plot 'rpart' Models: An Enhanced Version of 'plot.rpart'", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=rpart.plot", 
        `url`="https://CRAN.R-project.org/package=rpart.plot"), 
    `gtsummary`=list(
        `type`="software", 
        `author`="Daniel D. Sjoberg, Margie Hannum, Karissa Whiting and Emily C. Zabor", 
        `year`=2020, 
        `title`="gtsummary: Presentation-Ready Data Summary and Analytic Result Tables", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=gtsummary", 
        `url`="https://CRAN.R-project.org/package=gtsummary"), 
    `rmngb`=list(
        `type`="software", 
        `author`="Antoine Filipovic Pierucci", 
        `year`=2014, 
        `title`="rmngb: Miscellaneous Collection of Functions for Medical Data Analysis", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=rmngb", 
        `url`="https://CRAN.R-project.org/package=rmngb"), 
    `RVAideMemoire`=list(
        `type`="software", 
        `author`="Maxime Herv\u00E9", 
        `year`=2020, 
        `title`="RVAideMemoire: Testing and Plotting Procedures for Biostatistics", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=RVAideMemoire", 
        `url`="https://CRAN.R-project.org/package=RVAideMemoire"), 
    `chisq.posthoc.test`=list(
        `type`="software", 
        `author`="Daniel Ebbert", 
        `year`=2019, 
        `title`="chisq.posthoc.test: A Post Hoc Analysis for Pearson's Chi-Squared Test for Count Data", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=chisq.posthoc.test", 
        `url`="https://CRAN.R-project.org/package=chisq.posthoc.test"), 
    `easyalluvial`=list(
        `type`="software", 
        `author`="Bjoern Koneswarakantha", 
        `year`=2019, 
        `title`="easyalluvial: Generate Alluvial Plots with a Single Line of Code.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=easyalluvial", 
        `url`="https://CRAN.R-project.org/package=easyalluvial"), 
    `parcats`=list(
        `type`="software", 
        `author`="Bjoern Koneswarakantha", 
        `year`=2019, 
        `title`="parcats: Interactive Parallel Categories Diagrams for 'easyalluvial'", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=parcats", 
        `url`="https://CRAN.R-project.org/package=parcats"), 
    `plotROC`=list(
        `type`="software", 
        `author`="Michael C. Sachs", 
        `year`=2017, 
        `title`="plotROC: A Tool for Plotting ROC Curves.Journal of Statistical Software, Code Snippets, 79(2), 1-19. doi:10.18637/jss.v079.c02", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=plotROC", 
        `url`="https://CRAN.R-project.org/package=plotROC"), 
    `RGraphGallery`=list(
        `type`="website", 
        `author`="Holtz Yan", 
        `year`=2020, 
        `title`="The R Graph Gallery", 
        `publisher`="A website that displays hundreds of R charts https://www.r-graph-gallery.com", 
        `url`="https://github.com/holtzy/R-graph-gallery"), 
    `hrbrthemes`=list(
        `type`="software", 
        `author`="Bob Rudis", 
        `year`=2020, 
        `title`="hrbrthemes: Additional Themes, Theme Components and Utilities for 'ggplot2'.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=hrbrthemes", 
        `url`="https://CRAN.R-project.org/package=hrbrthemes"), 
    `retractcheck`=list(
        `type`="software", 
        `author`="Chris Hartgerink and Frederik Aust", 
        `year`=2019, 
        `title`="retractcheck: Retraction Scanner", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=retractcheck", 
        `url`="https://CRAN.R-project.org/package=retractcheck"), 
    `RefManageR`=list(
        `type`="software", 
        `author`="McLean MW", 
        `year`=2017, 
        `title`="RefManageR: Import and Manage BibTeX and BibLaTeX References in R. The Journal of Open Source Software.", 
        `doi`="10.21105/joss.00338", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=RefManageR", 
        `url`="https://CRAN.R-project.org/package=RefManageR"), 
    `rcrossref`=list(
        `type`="software", 
        `author`="Scott Chamberlain and Hao Zhu and Najko Jahn and Carl Boettiger and Karthik Ram", 
        `year`=2020, 
        `title`="rcrossref: Client for Various 'CrossRef' 'APIs'", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=rcrossref", 
        `url`="https://CRAN.R-project.org/package=rcrossref"), 
    `epiR`=list(
        `type`="software", 
        `author`="Mark Stevenson with contributions from Telmo Nunes, Cord Heuer, Jonathon Marshall, Javier Sanchez, Ron Thornton, Jeno Reiczigel, Jim Robison-Cox, Paola Sebastiani, Peter Solymos, Kazuki Yoshida, Geoff Jones, Sarah Pirikahu, Simon Firestone, Ryan Kyle, Johann Popp, Mathew Jay and Charles Reynard.", 
        `year`=2020, 
        `title`="epiR: Tools for the Analysis of Epidemiological Data.", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=epiR", 
        `url`="https://CRAN.R-project.org/package=epiR"), 
    `KMunicate`=list(
        `type`="software", 
        `author`="Alessandro Gasparini", 
        `year`=2020, 
        `title`="KMunicate: KMunicate-Style Kaplan\u2013Meier Plots", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=KMunicate", 
        `url`="https://CRAN.R-project.org/package=KMunicate"), 
    `KMunicate2`=list(
        `type`="article", 
        `author`="Morris TP, Jarvis CI, Cragg W, et al", 
        `title`="Proposals on Kaplan\u2013Meier plots in medical research and a survey of stakeholder views: KMunicate", 
        `year`=2019, 
        `publisher`="BMJ Open 2019;9:e030215.", 
        `doi`="10.1136/bmjopen-2019-030215", 
        `url`="https://bmjopen.bmj.com/content/9/9/e030215"), 
    `Fagan`=list(
        `type`="software", 
        `author`="Adam Chekroud", 
        `title`="nomogrammer: Fagan's nomograms with ggplot2", 
        `publisher`="GitHub", 
        `year`=2020, 
        `url`="https://github.com/achekroud/nomogrammer"), 
    `Fagan2`=list(
        `type`="article", 
        `author`=NULL, 
        `title`="StATS: What is a Fagan nomogram?", 
        `publisher`="website", 
        `year`=2020, 
        `url`="http://www.pmean.com/definitions/fagan.htm"), 
    `benford.analysis`=list(
        `type`="software", 
        `author`="Carlos Cinelli", 
        `year`=2020, 
        `title`="benford.analysis: Benford Analysis for Data Validation and Forensic Analytics", 
        `publisher`="[R package]. Retrieved from http://github.com/carloscinelli/benford.analysis", 
        `url`="http://github.com/carloscinelli/benford.analysis"), 
    `vtree`=list(
        `type`="software", 
        `author`="Nick Barrowman", 
        `year`=2020, 
        `title`="vtree: Display Information About Nested Subsets of a Data Frame", 
        `publisher`="[R package]. Retrieved from https://CRAN.R-project.org/package=vtree", 
        `url`="https://CRAN.R-project.org/package=vtree"), 
    `PathologyKappa`=list(
        `type`="article", 
        `title`="Pathologists should probably forget about kappa. Percent agreement, diagnostic specificity and related metrics provide more clinically applicable measures of interobserver variability", 
        `year`=2020, 
        `author`=NULL, 
        `publisher`="Annals of Diagnostic Pathology", 
        `volume`=47, 
        `url`="https://www.sciencedirect.com/science/article/abs/pii/S1092913420301040"), 
    `DiagnosticTests`=list(
        `type`="article", 
        `title`="The Interpretation of SARS-CoV-2 Diagnostic Tests", 
        `year`=2020, 
        `author`="Stites EC, Wilen CB.", 
        `publisher`="Med (N Y).", 
        `doi`="10.1016/j.medj.2020.08.001", 
        `url`="https://www.cell.com/med/fulltext/S2666-6340(20)30016-7"), 
    `dichotomizing`=list(
        `type`="article", 
        `title`="Dichotomizing continuous predictors in multiple regression: a bad idea.", 
        `year`=2006, 
        `author`="Royston, P., Altman, D.G. and Sauerbrei, W.", 
        `publisher`="Statist. Med.", 
        `volume`=25, 
        `pages`="127-141", 
        `doi`="10.1002/sim.2331", 
        `url`="https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.2331"), 
    `bbccookbook`=list(
        `type`="article", 
        `title`="BBC Visual and Data Journalism cookbook for R graphics", 
        `year`=2019, 
        `author`="BBC data team", 
        `url`="https://bbc.github.io/rcookbook/"), 
    `bbplot`=list(
        `type`="software", 
        `author`="Nassos Stylianou and Will william.dahlgreen@bbc.co.uk Dahlgreen and Robert robert.cuffe@bbc.co.uk Cuffe and Tom Calver and Ransome Mpini", 
        `year`=2020, 
        `title`="bbplot: MAKING GGPLOT GRAPHICS IN BBC NEWS STYLE", 
        `publisher`="[R package]. Retrieved from https://github.com/bbc/bbplot", 
        `url`="https://github.com/bbc/bbplot"), 
    `ClinicoPathJamoviModule`=list(
        `type`="software", 
        `author`="Serdar Balci", 
        `year`=2022, 
        `title`="ClinicoPath jamovi Module doi:10.5281/zenodo.3997188", 
        `publisher`="[R package]. Retrieved from https://github.com/sbalci/ClinicoPathJamoviModule", 
        `doi`="10.17605/OSF.IO/9SZUD", 
        `url`="https://www.serdarbalci.com/ClinicoPathJamoviModule/"))


File: R\jjbarstats.b.R
--------------------------------------------------
Content of R\jjbarstats.b.R:
#' @title Bar Charts
#'
#' @importFrom R6 R6Class
#' @import jmvcore
#'

jjbarstatsClass <- if (requireNamespace('jmvcore'))
    R6::R6Class(
        "jjbarstatsClass",
        inherit = jjbarstatsBase,
        private = list(
            # init ----

            .init = function() {

                deplen <- length(self$options$dep)
                self$results$plot$setSize(650, deplen * 450)

                if (!is.null(self$options$grvar)) {

                    mydata <- self$data

                    grvar <-  self$options$grvar

                    num_levels <- nlevels(
                        as.factor(mydata[[grvar]])
                    )

                    self$results$plot2$setSize(num_levels * 650, deplen * 450)

                }

            }

            # run ----
            ,
            .run = function() {
                # Initial Message ----
                if (is.null(self$options$dep) ||
                    is.null(self$options$group)) {
                    # todo ----

                    todo <- glue::glue(
                        "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Bar Charts.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html' target='_blank'>ggbarstats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggbarstats.html' target='_blank'>grouped_ggbarstats</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                    )

                    self$results$todo$setContent(todo)

                    return()

                } else {
                    # todo ----
                    todo <- glue::glue(
                        "<br>You have selected to use a barplot to compare a categorical variable with another.<br><hr>"
                    )

                    self$results$todo$setContent(todo)

                    if (nrow(self$data) == 0)
                        stop('Data contains no (complete) rows')

                }
            }

            ,
            .plot = function(image, ggtheme, theme, ...) {
                # the plot function ----
                # Error messages ----

                if (is.null(self$options$dep) ||
                    is.null(self$options$group))
                    return()

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')


                # Prepare Data ----

                mydata <- self$data


                # Exclude NA ----

                mydata <- jmvcore::naOmit(mydata)

                dep <- self$options$dep

                group <- self$options$group


                # mytitle <- self$options$title

                # if (mytitle == '') {
                #     mytitle <- NULL
                # }


                # xtitle <- self$options$xtitle
                #
                # if (xtitle == '') {
                #     xtitle <- NULL
                # }

                # ytitle <- self$options$ytitle
                #
                # if (ytitle == '') {
                #     ytitle <- NULL
                # }


                # direction, paired ----

                # direction <- self$options$direction
                #
                # if (direction == "repeated") {
                #     paired <- TRUE
                # } else if (direction == "independent") {
                #     paired <- FALSE
                # }

                # ggbarstats ----
                # bar charts for categorical data
                # https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html


                # originaltheme <- self$options$originaltheme
                #
                # selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()

                # dep == 1 ----

                if (length(self$options$dep) == 1) {
                    plot <-
                        ggstatsplot::ggbarstats(
                            data = mydata,
                            x = !!rlang::sym(dep),
                            y = !!rlang::sym(group)

                            # , title = mytitle
                            # , xlab = xtitle
                            # , ylab = ytitle
                            # , paired = paired
                            # , results.subtitle = self$options$resultssubtitle

                            # , ggtheme = selected_theme
                        )

                    originaltheme <- self$options$originaltheme

                    if (!originaltheme) {
                        plot <- plot + ggtheme
                    } else {
                        plot <- plot + ggstatsplot::theme_ggstatsplot()
                        # ggplot2::theme_bw()
                    }


                }


                # dep > 1 ----

                if (length(self$options$dep) > 1) {
                    dep2 <- as.list(self$options$dep)
                    dep2_symbols <- purrr::map(dep2, rlang::sym)

                    plotlist <-
                        purrr::pmap(
                            .l = list(
                                x = dep2_symbols,
                                messages = FALSE
                                ),
                            .f = function(x, messages) {
                                 ggstatsplot::ggbarstats(
                                    data = mydata,
                                        x = !!x,
                                        messages = messages,
                            y = !!rlang::sym(group)

                            # , title = mytitle
                            # , paired = paired
                            # , results.subtitle = self$options$resultssubtitle

                            # , ggtheme = selected_theme

                        )
                            }
                        )

                    originaltheme <- self$options$originaltheme


                    # Assuming plotlist is a list of plots
                    for (i in seq_along(plotlist)) {
                        if (!originaltheme) {
                            plotlist[[i]] <- plotlist[[i]] + ggtheme
                        } else {
                            plotlist[[i]] <- plotlist[[i]] +
                                ggstatsplot::theme_ggstatsplot()
                        }
                    }

                    plot <- ggstatsplot::combine_plots(
                        plotlist = plotlist,
                        plotgrid.args = list(ncol = 1)
                    )




                }

            #     originaltheme <- self$options$originaltheme
            #
            # if (!originaltheme) {
            #     plot <- plot + ggtheme
            # } else {
            #     plot <- plot + ggstatsplot::theme_ggstatsplot()
            #     # ggplot2::theme_bw()
            # }

                # Print Plot ----

                print(plot)
                TRUE

            }


            ,

            .plot2 = function(image, ggtheme, theme, ...) {
                # the plot function ----

                # Error messages ----

                if (is.null(self$options$dep) ||
                    is.null(self$options$group) || is.null(self$options$grvar))
                    return()

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

                # Prepare Data ----

                mydata <- self$data


                # Exclude NA ----

                mydata <- jmvcore::naOmit(mydata)

                dep <- self$options$dep

                group <- self$options$group


                # mytitle <- self$options$title

                # if (mytitle == '') {
                #     mytitle <- NULL
                # }


                # xtitle <- self$options$xtitle
                #
                # if (xtitle == '') {
                #     xtitle <- NULL
                # }

                # ytitle <- self$options$ytitle
                #
                # if (ytitle == '') {
                #     ytitle <- NULL
                # }


                # direction, paired ----

                # direction <- self$options$direction
                #
                # if (direction == "repeated") {
                #     paired <- TRUE
                # } else if (direction == "independent") {
                #     paired <- FALSE
                # }


                # grouped_ggbarstats ----
                # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggbarstats.html


                dep1 <- self$options$dep

                grvar <- self$options$grvar

                # originaltheme <- self$options$originaltheme
                #
                # selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()


                # dep = 1 ----

                originaltheme <- self$options$originaltheme

                if (length(self$options$dep) == 1) {

                    selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()

                    plot2 <- ggstatsplot::grouped_ggbarstats(
                        data = mydata,
                        x = !!rlang::sym(dep1),
                        y = !!rlang::sym(group),
                        grouping.var = !!rlang::sym(grvar)

                        # , title = mytitle
                        # , xlab = xtitle
                        # , ylab = ytitle
                        # , paired = paired
                        , ggtheme = selected_theme
                        # , results.subtitle = self$options$resultssubtitle

                        )

                    # originaltheme <- self$options$originaltheme
                    #
                    # if (!originaltheme) {
                    #     plot2 <- plot2 + ggtheme
                    # } else {
                    #     plot2 <- plot2 + ggstatsplot::theme_ggstatsplot()
                    # }



                }


                # dep > 1 ----

                if (length(self$options$dep) > 1) {

                    originaltheme <- self$options$originaltheme

                    selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()



                    dep2 <- as.list(self$options$dep)
                    dep2_symbols <- purrr::map(dep2, rlang::sym)

                    plotlist <-
                        purrr::pmap(
                            .l = list(
                                x = dep2_symbols,
                                messages = FALSE
                                ),
                            .f = function(x, messages) {
                                ggstatsplot::grouped_ggbarstats(
                            data = mydata,
                            x = !!x,
                            messages = messages,

                            y = !!rlang::sym(group),
                            grouping.var = !!rlang::sym(grvar)


                            # , title = mytitle
                            # , xlab = xtitle
                            # , ylab = ytitle
                            # , paired = paired
                            , ggtheme = selected_theme
                            # , results.subtitle = self$options$resultssubtitle


                            )
                            }
                        )


                    # originaltheme <- self$options$originaltheme
                    #
                    #
                    # # Assuming plotlist is a list of plots
                    # for (i in seq_along(plotlist)) {
                    #     if (!originaltheme) {
                    #         plotlist[[i]] <- plotlist[[i]] + ggtheme
                    #     } else {
                    #         plotlist[[i]] <- plotlist[[i]] +
                    #             ggstatsplot::theme_ggstatsplot()
                    #     }
                    # }


                    plot2 <- ggstatsplot::combine_plots(
                        plotlist = plotlist,
                            plotgrid.args = list(ncol = 1)
                            )

                    }

                # Print Plot ----

                print(plot2)
                TRUE
            }

        )
    )


File: R\jjbarstats.h.R
--------------------------------------------------
Content of R\jjbarstats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjbarstatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbarstatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            group = NULL,
            grvar = NULL,
            excl = TRUE,
            typestatistics = "parametric",
            pairwisecomparisons = TRUE,
            pairwisedisplay = "significant",
            padjustmethod = "holm",
            originaltheme = FALSE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjbarstats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariables$new(
                "dep",
                dep,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..excl <- jmvcore::OptionBool$new(
                "excl",
                excl,
                default=TRUE)
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..pairwisecomparisons <- jmvcore::OptionBool$new(
                "pairwisecomparisons",
                pairwisecomparisons,
                default=TRUE)
            private$..pairwisedisplay <- jmvcore::OptionList$new(
                "pairwisedisplay",
                pairwisedisplay,
                options=list(
                    "significant",
                    "non-significant",
                    "everything"),
                default="significant")
            private$..padjustmethod <- jmvcore::OptionList$new(
                "padjustmethod",
                padjustmethod,
                options=list(
                    "holm",
                    "hochberg",
                    "hommel",
                    "bonferroni",
                    "BH",
                    "BY",
                    "fdr",
                    "none"),
                default="holm")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)

            self$.addOption(private$..dep)
            self$.addOption(private$..group)
            self$.addOption(private$..grvar)
            self$.addOption(private$..excl)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..pairwisecomparisons)
            self$.addOption(private$..pairwisedisplay)
            self$.addOption(private$..padjustmethod)
            self$.addOption(private$..originaltheme)
        }),
    active = list(
        dep = function() private$..dep$value,
        group = function() private$..group$value,
        grvar = function() private$..grvar$value,
        excl = function() private$..excl$value,
        typestatistics = function() private$..typestatistics$value,
        pairwisecomparisons = function() private$..pairwisecomparisons$value,
        pairwisedisplay = function() private$..pairwisedisplay$value,
        padjustmethod = function() private$..padjustmethod$value,
        originaltheme = function() private$..originaltheme$value),
    private = list(
        ..dep = NA,
        ..group = NA,
        ..grvar = NA,
        ..excl = NA,
        ..typestatistics = NA,
        ..pairwisecomparisons = NA,
        ..pairwisedisplay = NA,
        ..padjustmethod = NA,
        ..originaltheme = NA)
)

jjbarstatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbarstatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Bar Charts",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "direction",
                    "originaltheme"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`Bar Chart Splitted by {grvar}`",
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="Bar Chart",
                renderFun=".plot",
                requiresData=TRUE))}))

jjbarstatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbarstatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjbarstats",
                version = c(1,0,0),
                options = options,
                results = jjbarstatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Bar Charts
#'
#' 'Wrapper Function for ggstatsplot::ggbarstats and
#' ggstatsplot::grouped_ggbarstats to generate Bar Charts.'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param group .
#' @param grvar .
#' @param excl .
#' @param typestatistics .
#' @param pairwisecomparisons .
#' @param pairwisedisplay .
#' @param padjustmethod .
#' @param originaltheme .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjbarstats <- function(
    data,
    dep,
    group,
    grvar,
    excl = TRUE,
    typestatistics = "parametric",
    pairwisecomparisons = TRUE,
    pairwisedisplay = "significant",
    padjustmethod = "holm",
    originaltheme = FALSE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjbarstats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in dep) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in group) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjbarstatsOptions$new(
        dep = dep,
        group = group,
        grvar = grvar,
        excl = excl,
        typestatistics = typestatistics,
        pairwisecomparisons = pairwisecomparisons,
        pairwisedisplay = pairwisedisplay,
        padjustmethod = padjustmethod,
        originaltheme = originaltheme)

    analysis <- jjbarstatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjbetweenstats.b.R
--------------------------------------------------
Content of R\jjbetweenstats.b.R:
#' @title Violin Plots to Compare Between Groups
#' @importFrom R6 R6Class
#' @import jmvcore
#'


jjbetweenstatsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjbetweenstatsClass",
    inherit = jjbetweenstatsBase,
    private = list(

        # init ----

        .init = function() {

            deplen <- length(self$options$dep)

            self$results$plot$setSize(650, deplen * 450)


            if (!is.null(self$options$grvar)) {

                mydata <- self$data

                grvar <-  self$options$grvar

                num_levels <- nlevels(
                    as.factor(mydata[[grvar]])
                )

                self$results$plot2$setSize(num_levels * 650, deplen * 450)

            }

        }

        # run ----
        ,
        .run = function() {

            # Initial Message ----
            if (is.null(self$options$dep) ||
                is.null(self$options$group)) {
                # TODO ----

                todo <- glue::glue(
                    "
                <br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Box Violin Plots.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html' target='_blank'>here</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggbetweenstats.html' target='_blank'>here</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                todo <- glue::glue(
                    "<br>You have selected to use a Violin Plot to compare continuous variables between groups.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }

        ,
        .plot = function(image, ggtheme, theme, ...) {

            # the plot function ----
            # Error messages ----

            if (is.null(self$options$dep) ||
                is.null(self$options$group))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # read data ----

            mydata <- self$data


            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # read arguments ----

            dep <- self$options$dep

            group <- self$options$group



            # # mydataview ----
            # self$results$mydataview$setContent(
            #     list(
            #         dep1 = dep,
            #         group = group,
            #         mydata = head(mydata)
            #         )
            # )




            ## type of statistics ----

            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            pairwisecomparisons <- self$options$pairwisecomparisons

            pairwisedisplay <-
                jmvcore::constructFormula(terms = self$options$pairwisedisplay)

            padjustmethod <-
                jmvcore::constructFormula(terms = self$options$padjustmethod)

            # read arguments ----

            mytitle <- self$options$mytitle

            xtitle <- self$options$xtitle

            if (xtitle == '') {
                xtitle <- NULL
            }

            ytitle <- self$options$ytitle

            if (ytitle == '') {
                ytitle <- NULL
            }

            effsizetype <- self$options$effsizetype

            centralityplotting <- self$options$centralityplotting

            centralitytype <- self$options$centralitytype

            violin <- self$options$violin

            boxplot <- self$options$boxplot

            point <- self$options$point

            if (violin) {

                violinargs <- list(width = 0.5, alpha = 0.2, na.rm = TRUE)

                } else {

                violinargs <- list(width = 0)
            }


            if (boxplot) {
            boxplotargs <- list(width = 0.2, alpha = 0.5, na.rm = TRUE)
            } else {
            boxplotargs <- list(width = 0)
            }

            if (point) {
            pointargs <- list(alpha = 0.5, linetype = "dashed")
            } else {
            pointargs <- list(alpha = 0)
            }


            # ggbetweenstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html

            # dep == 1 ----

            if (length(self$options$dep) == 1) {

            plot <- ggstatsplot::ggbetweenstats(
                data = mydata,
                x = !!rlang::sym(group),
                y = !!rlang::sym(dep)

                    , title = mytitle
                    , xlab = xtitle
                    , ylab = ytitle

                , type = typestatistics
                    , pairwise.comparisons = pairwisecomparisons
                    , pairwise.display = pairwisedisplay
                    , p.adjust.method = padjustmethod
                    , effsize.type = effsizetype
                    , centrality.plotting = centralityplotting
                    , centrality.type = centralitytype
                    , violin.args = violinargs
                    , boxplot.args = boxplotargs
                    , point.args = pointargs
                    , results.subtitle = self$options$resultssubtitle


                )

            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot <- plot + ggtheme
            } else {
                plot <- plot + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }


            }



            # dep > 1 ----

            if (length(self$options$dep) > 1) {
                dep2 <- as.list(self$options$dep)
                dep2_symbols <- purrr::map(dep2, rlang::sym)

                plotlist <-
                    purrr::pmap(
                        .l = list(
                            y = dep2_symbols,
                            messages = FALSE),

                        .f = function(y, messages) {
                            ggstatsplot::ggbetweenstats(
                                data = mydata,
                                y = !!y,
                                messages = messages,
                        x = !!rlang::sym(group)

                    , type = typestatistics
                    , title = mytitle
                    , xlab = xtitle
                    , ylab = ytitle
                    , pairwise.comparisons = pairwisecomparisons
                    , pairwise.display = pairwisedisplay
                    , p.adjust.method = padjustmethod
                    , effsize.type = effsizetype
                    , centrality.plotting = centralityplotting
                    , centrality.type = centralitytype
                    , violin.args = violinargs
                    , boxplot.args = boxplotargs
                    , point.args = pointargs
                    , results.subtitle = self$options$resultssubtitle


                    )
                        }
                    )

                originaltheme <- self$options$originaltheme


                # Assuming plotlist is a list of plots
                for (i in seq_along(plotlist)) {
                    if (!originaltheme) {
                        plotlist[[i]] <- plotlist[[i]] + ggtheme
                    } else {
                        plotlist[[i]] <- plotlist[[i]] + ggstatsplot::theme_ggstatsplot()
                    }
                }

                # Now combine the plots with the applied themes
                plot <- ggstatsplot::combine_plots(
                    plotlist = plotlist,
                    plotgrid.args = list(ncol = 1)
                )


        }


                ## Print Plot ----

                print(plot)
                TRUE


            }

        ,
        .plot2 = function(image, ggtheme, theme, ...) {

            # the plot function ----
            # Error messages ----

            if (is.null(self$options$dep) ||
                is.null(self$options$group) || is.null(self$options$grvar))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # read data ----

            mydata <- self$data


            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)



            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            pairwisecomparisons <- self$options$pairwisecomparisons

            pairwisedisplay <-
                jmvcore::constructFormula(terms = self$options$pairwisedisplay)

            padjustmethod <-
                jmvcore::constructFormula(terms = self$options$padjustmethod)


            # read arguments ----

            dep <- self$options$dep

            group <- self$options$group


            # read arguments ----

            dep <- self$options$dep

            group <- self$options$group



            # # mydataview ----
            # self$results$mydataview$setContent(
            #     list(
            #         dep1 = dep,
            #         group = group,
            #         mydata = head(mydata)
            #         )
            # )


            ## type of statistics ----

            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            pairwisecomparisons <- self$options$pairwisecomparisons

            pairwisedisplay <-
                jmvcore::constructFormula(terms = self$options$pairwisedisplay)

            padjustmethod <-
                jmvcore::constructFormula(terms = self$options$padjustmethod)

            # read arguments ----

            effsizetype <- self$options$effsizetype

            centralityplotting <- self$options$centralityplotting

            centralitytype <- self$options$centralitytype

            violin <- self$options$violin

            boxplot <- self$options$boxplot

            point <- self$options$point

            if (violin) {

                violinargs <- list(width = 0.5, alpha = 0.2, na.rm = TRUE)

            } else {

                violinargs <- list(width = 0)
            }


            if (boxplot) {
                boxplotargs <- list(width = 0.2, alpha = 0.5, na.rm = TRUE)
            } else {
                boxplotargs <- list(width = 0)
            }

            if (point) {
                pointargs <- list(alpha = 0.5, linetype = "dashed")
            } else {
                pointargs <- list(alpha = 0)
            }


            # grouped_ggbetweenstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggbetweenstats.html


            # dep = 1 ----

            grvar <- self$options$grvar

            originaltheme <- self$options$originaltheme

            if (length(self$options$dep) == 1) {

                selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()

                # Create plot2 with the selected theme
                plot2 <- ggstatsplot::grouped_ggbetweenstats(
                    data = mydata,
                    x = !!rlang::sym(group),
                    y = !!rlang::sym(dep),
                    grouping.var = !!rlang::sym(grvar),
                    type = typestatistics,
                    pairwise.comparisons = pairwisecomparisons,
                    pairwise.display = pairwisedisplay,
                    p.adjust.method = padjustmethod,
                    effsize.type = effsizetype,
                    centrality.plotting = centralityplotting,
                    centrality.type = centralitytype,
                    violin.args = violinargs,
                    boxplot.args = boxplotargs,
                    point.args = pointargs,
                    results.subtitle = self$options$resultssubtitle,


                    ggtheme = selected_theme


                )

            }


            # dep > 1 ----

            if (length(self$options$dep) > 1) {

                originaltheme <- self$options$originaltheme

                selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()

                # Convert 'dep' to a list and then to symbols
                dep2 <- as.list(self$options$dep)
                dep2_symbols <- purrr::map(dep2, rlang::sym)

                plotlist <-
                    purrr::pmap(
                        .l = list(
                            y = dep2_symbols,
                            messages = FALSE
                            ),
                        .f = function(y, messages) {


                        ggstatsplot::grouped_ggbetweenstats(

                        data = mydata,
                        y = !!y,
                        messages = messages,

                        x = !!rlang::sym(group),
                        grouping.var = !!rlang::sym(grvar)

                        , type = typestatistics
                        , pairwise.comparisons = pairwisecomparisons
                        , pairwise.display = pairwisedisplay
                        , p.adjust.method = padjustmethod
                        , effsize.type = effsizetype
                        , centrality.plotting = centralityplotting
                        , centrality.type = centralitytype
                        , violin.args = violinargs
                        , boxplot.args = boxplotargs
                        , point.args = pointargs
                        , ggtheme = selected_theme
                        , results.subtitle = self$options$resultssubtitle


                    )
                    }
                    )

                # Combine plots into a single plot
                plot2 <- ggstatsplot::combine_plots(
                    plotlist = plotlist,
                    plotgrid.args = list(ncol = 1)
                )

            }

            ## Print Plot ----

            print(plot2)
            TRUE

        }

    )

)


File: R\jjbetweenstats.h.R
--------------------------------------------------
Content of R\jjbetweenstats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjbetweenstatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbetweenstatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            group = NULL,
            grvar = NULL,
            centralityplotting = FALSE,
            centralitytype = "parameteric",
            typestatistics = "parametric",
            pairwisecomparisons = FALSE,
            pairwisedisplay = "significant",
            padjustmethod = "holm",
            effsizetype = "biased",
            violin = TRUE,
            boxplot = TRUE,
            point = TRUE,
            mytitle = "Within Group Comparison",
            xtitle = "",
            ytitle = "",
            originaltheme = FALSE,
            resultssubtitle = TRUE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjbetweenstats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariables$new(
                "dep",
                dep,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"),
                default=NULL)
            private$..centralityplotting <- jmvcore::OptionBool$new(
                "centralityplotting",
                centralityplotting,
                default=FALSE)
            private$..centralitytype <- jmvcore::OptionList$new(
                "centralitytype",
                centralitytype,
                options=list(
                    "parameteric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parameteric")
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..pairwisecomparisons <- jmvcore::OptionBool$new(
                "pairwisecomparisons",
                pairwisecomparisons,
                default=FALSE)
            private$..pairwisedisplay <- jmvcore::OptionList$new(
                "pairwisedisplay",
                pairwisedisplay,
                options=list(
                    "significant",
                    "non-significant",
                    "everything"),
                default="significant")
            private$..padjustmethod <- jmvcore::OptionList$new(
                "padjustmethod",
                padjustmethod,
                options=list(
                    "holm",
                    "hochberg",
                    "hommel",
                    "bonferroni",
                    "BH",
                    "BY",
                    "fdr",
                    "none"),
                default="holm")
            private$..effsizetype <- jmvcore::OptionList$new(
                "effsizetype",
                effsizetype,
                options=list(
                    "biased",
                    "unbiased",
                    "eta",
                    "omega"),
                default="biased")
            private$..violin <- jmvcore::OptionBool$new(
                "violin",
                violin,
                default=TRUE)
            private$..boxplot <- jmvcore::OptionBool$new(
                "boxplot",
                boxplot,
                default=TRUE)
            private$..point <- jmvcore::OptionBool$new(
                "point",
                point,
                default=TRUE)
            private$..mytitle <- jmvcore::OptionString$new(
                "mytitle",
                mytitle,
                default="Within Group Comparison")
            private$..xtitle <- jmvcore::OptionString$new(
                "xtitle",
                xtitle,
                default="")
            private$..ytitle <- jmvcore::OptionString$new(
                "ytitle",
                ytitle,
                default="")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)

            self$.addOption(private$..dep)
            self$.addOption(private$..group)
            self$.addOption(private$..grvar)
            self$.addOption(private$..centralityplotting)
            self$.addOption(private$..centralitytype)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..pairwisecomparisons)
            self$.addOption(private$..pairwisedisplay)
            self$.addOption(private$..padjustmethod)
            self$.addOption(private$..effsizetype)
            self$.addOption(private$..violin)
            self$.addOption(private$..boxplot)
            self$.addOption(private$..point)
            self$.addOption(private$..mytitle)
            self$.addOption(private$..xtitle)
            self$.addOption(private$..ytitle)
            self$.addOption(private$..originaltheme)
            self$.addOption(private$..resultssubtitle)
        }),
    active = list(
        dep = function() private$..dep$value,
        group = function() private$..group$value,
        grvar = function() private$..grvar$value,
        centralityplotting = function() private$..centralityplotting$value,
        centralitytype = function() private$..centralitytype$value,
        typestatistics = function() private$..typestatistics$value,
        pairwisecomparisons = function() private$..pairwisecomparisons$value,
        pairwisedisplay = function() private$..pairwisedisplay$value,
        padjustmethod = function() private$..padjustmethod$value,
        effsizetype = function() private$..effsizetype$value,
        violin = function() private$..violin$value,
        boxplot = function() private$..boxplot$value,
        point = function() private$..point$value,
        mytitle = function() private$..mytitle$value,
        xtitle = function() private$..xtitle$value,
        ytitle = function() private$..ytitle$value,
        originaltheme = function() private$..originaltheme$value,
        resultssubtitle = function() private$..resultssubtitle$value),
    private = list(
        ..dep = NA,
        ..group = NA,
        ..grvar = NA,
        ..centralityplotting = NA,
        ..centralitytype = NA,
        ..typestatistics = NA,
        ..pairwisecomparisons = NA,
        ..pairwisedisplay = NA,
        ..padjustmethod = NA,
        ..effsizetype = NA,
        ..violin = NA,
        ..boxplot = NA,
        ..point = NA,
        ..mytitle = NA,
        ..xtitle = NA,
        ..ytitle = NA,
        ..originaltheme = NA,
        ..resultssubtitle = NA)
)

jjbetweenstatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbetweenstatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Violin Plots to Compare Between Groups",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "originaltheme",
                    "typestatistics",
                    "excl"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`Violin Plot by ${grvar}`",
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="Violin Plot",
                renderFun=".plot",
                requiresData=TRUE))}))

jjbetweenstatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjbetweenstatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjbetweenstats",
                version = c(1,0,0),
                options = options,
                results = jjbetweenstatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Box-Violin Plots to Compare Between Groups
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param group .
#' @param grvar .
#' @param centralityplotting .
#' @param centralitytype .
#' @param typestatistics .
#' @param pairwisecomparisons .
#' @param pairwisedisplay .
#' @param padjustmethod .
#' @param effsizetype .
#' @param violin .
#' @param boxplot .
#' @param point .
#' @param mytitle .
#' @param xtitle .
#' @param ytitle .
#' @param originaltheme .
#' @param resultssubtitle .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjbetweenstats <- function(
    data,
    dep,
    group,
    grvar = NULL,
    centralityplotting = FALSE,
    centralitytype = "parameteric",
    typestatistics = "parametric",
    pairwisecomparisons = FALSE,
    pairwisedisplay = "significant",
    padjustmethod = "holm",
    effsizetype = "biased",
    violin = TRUE,
    boxplot = TRUE,
    point = TRUE,
    mytitle = "Within Group Comparison",
    xtitle = "",
    ytitle = "",
    originaltheme = FALSE,
    resultssubtitle = TRUE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjbetweenstats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in group) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjbetweenstatsOptions$new(
        dep = dep,
        group = group,
        grvar = grvar,
        centralityplotting = centralityplotting,
        centralitytype = centralitytype,
        typestatistics = typestatistics,
        pairwisecomparisons = pairwisecomparisons,
        pairwisedisplay = pairwisedisplay,
        padjustmethod = padjustmethod,
        effsizetype = effsizetype,
        violin = violin,
        boxplot = boxplot,
        point = point,
        mytitle = mytitle,
        xtitle = xtitle,
        ytitle = ytitle,
        originaltheme = originaltheme,
        resultssubtitle = resultssubtitle)

    analysis <- jjbetweenstatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjcorrmat.b.R
--------------------------------------------------
Content of R\jjcorrmat.b.R:
#' @title Correlation Matrix
#' @importFrom R6 R6Class
#' @import jmvcore
#'


jjcorrmatClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjcorrmatClass",
    inherit = jjcorrmatBase,
    private = list(


            # init ----
            .init = function() {

                deplen <- length(self$options$dep)

                self$results$plot$setSize(600, 450)


                if (!is.null(self$options$grvar)) {

                    mydata <- self$data

                    grvar <-  self$options$grvar

                    num_levels <- nlevels(
                        as.factor(mydata[[grvar]])
                    )

                    self$results$plot2$setSize(num_levels * 600, 450)

                }



            }

            # run ----
            ,
            .run = function() {

            # Initial Message ----
            if ( length(self$options$dep) <= 1 ) {

                # TODO ----

                todo <- glue::glue(
                "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Bar Charts.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html' target='_blank'>ggcorrmat</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html' target='_blank'>grouped_ggcorrmat</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                # TODO ----
                todo <- glue::glue(
                    "<br>You have selected to use a correlation matrix to compare continuous variables.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }



        ,
        .plot = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( length(self$options$dep) <= 1 )
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----


            mydata <- self$data


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)





            # define main arguments ----

            myvars <- jmvcore::constructFormula(terms = self$options$dep)

            myvars <- jmvcore::decomposeFormula(formula = myvars)

            myvars <- unlist(myvars)

            # originaltheme <- self$options$originaltheme


            # ggcorrmat ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html



            plot <- ggstatsplot::ggcorrmat(
                data = mydata,
                cor.vars = myvars,
                cor.vars.names = NULL,
                output = "plot",
                matrix.type = "full",
                matrix.method = "square",

                type = typestatistics,

                beta = 0.1,
                k = 2L,
                sig.level = 0.05,
                conf.level = 0.95,
                bf.prior = 0.707,
                p.adjust.method = "none",
                pch = "cross",
                ggcorrplot.args = list(outline.color = "black"),
                package = "RColorBrewer",
                palette = "Dark2",
                colors = c("#E69F00", "white", "#009E73"),

                ggplot.component = NULL,
                title = NULL,
                subtitle = NULL,
                caption = NULL,
                messages = TRUE

            )


            # originaltheme <- self$options$originaltheme
            #
            # if (!originaltheme) {
            #     plot <- plot + ggtheme
            # } else {
            #     plot <- plot + ggstatsplot::theme_ggstatsplot()
            #     # ggplot2::theme_bw()
            # }



            # Print Plot ----

            print(plot)
            TRUE

        }


        ,

        .plot2 = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$grvar))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)




            # define main arguments ----

            myvars <- jmvcore::constructFormula(terms = self$options$dep)

            myvars <- jmvcore::decomposeFormula(formula = myvars)

            myvars <- unlist(myvars)

            # originaltheme <- self$options$originaltheme


            # grouped_ggcorrmat ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html



            if ( !is.null(self$options$grvar) ) {

                grvar <- self$options$grvar

                plot2 <- ggstatsplot::grouped_ggcorrmat(
                    data = mydata,
                    cor.vars = myvars,
                    cor.vars.names = NULL,
                    grouping.var = !!rlang::sym(grvar),
                    title.prefix = NULL,
                    output = "plot",
                    plotgrid.args = list(),
                    title.text = NULL,
                    title.args = list(size = 16, fontface = "bold"),
                    caption.text = NULL,
                    caption.args = list(size = 10),
                    sub.text = NULL,
                    sub.args = list(size = 12)
                    , ggtheme = ggtheme
                    , ggstatsplot.layer = originaltheme
                    , type = typestatistics



                )


            }


            # originaltheme <- self$options$originaltheme
            #
            # if (!originaltheme) {
            #     plot <- plot + ggtheme
            # } else {
            #     plot <- plot + ggstatsplot::theme_ggstatsplot()
            #     # ggplot2::theme_bw()
            # }

            # Print Plot ----

            print(plot2)
            TRUE

        }

    )
)









File: R\jjcorrmat.h.R
--------------------------------------------------
Content of R\jjcorrmat.h.R:

# This file is automatically generated, you probably don't want to edit this

jjcorrmatOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjcorrmatOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            grvar = NULL,
            typestatistics = "parametric", ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjcorrmat",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariables$new(
                "dep",
                dep,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")

            self$.addOption(private$..dep)
            self$.addOption(private$..grvar)
            self$.addOption(private$..typestatistics)
        }),
    active = list(
        dep = function() private$..dep$value,
        grvar = function() private$..grvar$value,
        typestatistics = function() private$..typestatistics$value),
    private = list(
        ..dep = NA,
        ..grvar = NA,
        ..typestatistics = NA)
)

jjcorrmatResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjcorrmatResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Correlation Matrix",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep",
                    "grvar",
                    "excl",
                    "originaltheme",
                    "typestatistics"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="Chart",
                width=800,
                height=600,
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="Chart",
                width=800,
                height=600,
                renderFun=".plot",
                requiresData=TRUE))}))

jjcorrmatBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjcorrmatBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjcorrmat",
                version = c(1,0,0),
                options = options,
                results = jjcorrmatResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Correlation Matrix
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param grvar .
#' @param typestatistics .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjcorrmat <- function(
    data,
    dep,
    grvar,
    typestatistics = "parametric") {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjcorrmat requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjcorrmatOptions$new(
        dep = dep,
        grvar = grvar,
        typestatistics = typestatistics)

    analysis <- jjcorrmatClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjdotplotstats.b.R
--------------------------------------------------
Content of R\jjdotplotstats.b.R:
#' @title Dot Chart
#' @importFrom R6 R6Class
#' @import jmvcore
#'


jjdotplotstatsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjdotplotstatsClass",
    inherit = jjdotplotstatsBase,
    private = list(


        # init ----

        .init = function() {

            deplen <- length(self$options$dep)

            self$results$plot$setSize(650, deplen * 450)


            if (!is.null(self$options$grvar)) {

                mydata <- self$data

                grvar <-  self$options$grvar

                num_levels <- nlevels(
                    as.factor(mydata[[grvar]])
                )

                self$results$plot2$setSize(num_levels * 650, deplen * 450)

            }

        }

        # run ----
        ,
        .run = function() {

            # Initial Message ----
            if ( is.null(self$options$dep) || is.null(self$options$group)) {

                # todo ----

                todo <- glue::glue(
                "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Bar Charts.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations for <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggdotplotstats.html' target='_blank'>ggdotplotstats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggdotplotstats.html' target='_blank'>grouped_ggdotplotstats</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                # todo ----
                todo <- glue::glue(
                    "<br>You have selected to use a Dot Plot to compare continuous variables by groups.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }


        ,
        .plot = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data


            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)



            # define main arguments ----

            dep <- self$options$dep

            group <- self$options$group


            # read arguments ----

            mytitle <- self$options$mytitle

            if (mytitle == '') {
                mytitle <- NULL
            }


            xtitle <- self$options$xtitle

            if (xtitle == '') {
                xtitle <- NULL
            }

            ytitle <- self$options$ytitle

            if (ytitle == '') {
                ytitle <- NULL
            }

            effsizetype <- self$options$effsizetype

            centralityplotting <- self$options$centralityplotting

            centralitytype <- self$options$centralitytype


            # ggdotplotstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggdotplotstats.html



            plot <-
                ggstatsplot::ggdotplotstats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group)
                    , title = mytitle
                    , xlab = xtitle
                    , ylab = ytitle
                    , type = typestatistics
                    , effsize.type = effsizetype
                    , centrality.plotting = centralityplotting
                    , centrality.type = centralitytype
                    , results.subtitle = self$options$resultssubtitle


                )


            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot <- plot + ggtheme
            } else {
                plot <- plot + ggstatsplot::theme_ggstatsplot()
            }

            # Print Plot ----

            print(plot)
            TRUE

        }


        ,

        .plot2 = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group) || is.null(self$options$grvar))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data


            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])

            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            # define main arguments ----


            dep <- self$options$dep

            group <- self$options$group


            effsizetype <- self$options$effsizetype

            centralityplotting <- self$options$centralityplotting

            centralitytype <- self$options$centralitytype


            # grouped_ggdotplotstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggdotplotstats.html



            if ( !is.null(self$options$grvar) ) {

                originaltheme <- self$options$originaltheme

                selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()


                grvar <- self$options$grvar

                plot2 <- ggstatsplot::grouped_ggdotplotstats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group),
                    grouping.var = !!rlang::sym(grvar)

                    , type = typestatistics
                    , effsize.type = effsizetype
                    , centrality.plotting = centralityplotting
                    , centrality.type = centralitytype
                    , ggtheme = selected_theme
                    , results.subtitle = self$options$resultssubtitle



                )
            }


            # Print Plot ----

            print(plot2)
            TRUE

        }





    )
)










File: R\jjdotplotstats.h.R
--------------------------------------------------
Content of R\jjdotplotstats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjdotplotstatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjdotplotstatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            group = NULL,
            grvar = NULL,
            typestatistics = "parametric",
            effsizetype = "biased",
            centralityplotting = FALSE,
            centralitytype = "parameteric",
            mytitle = "",
            xtitle = "",
            ytitle = "",
            originaltheme = FALSE,
            resultssubtitle = TRUE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjdotplotstats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariable$new(
                "dep",
                dep,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..effsizetype <- jmvcore::OptionList$new(
                "effsizetype",
                effsizetype,
                options=list(
                    "biased",
                    "unbiased",
                    "eta",
                    "omega"),
                default="biased")
            private$..centralityplotting <- jmvcore::OptionBool$new(
                "centralityplotting",
                centralityplotting,
                default=FALSE)
            private$..centralitytype <- jmvcore::OptionList$new(
                "centralitytype",
                centralitytype,
                options=list(
                    "parameteric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parameteric")
            private$..mytitle <- jmvcore::OptionString$new(
                "mytitle",
                mytitle,
                default="")
            private$..xtitle <- jmvcore::OptionString$new(
                "xtitle",
                xtitle,
                default="")
            private$..ytitle <- jmvcore::OptionString$new(
                "ytitle",
                ytitle,
                default="")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)

            self$.addOption(private$..dep)
            self$.addOption(private$..group)
            self$.addOption(private$..grvar)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..effsizetype)
            self$.addOption(private$..centralityplotting)
            self$.addOption(private$..centralitytype)
            self$.addOption(private$..mytitle)
            self$.addOption(private$..xtitle)
            self$.addOption(private$..ytitle)
            self$.addOption(private$..originaltheme)
            self$.addOption(private$..resultssubtitle)
        }),
    active = list(
        dep = function() private$..dep$value,
        group = function() private$..group$value,
        grvar = function() private$..grvar$value,
        typestatistics = function() private$..typestatistics$value,
        effsizetype = function() private$..effsizetype$value,
        centralityplotting = function() private$..centralityplotting$value,
        centralitytype = function() private$..centralitytype$value,
        mytitle = function() private$..mytitle$value,
        xtitle = function() private$..xtitle$value,
        ytitle = function() private$..ytitle$value,
        originaltheme = function() private$..originaltheme$value,
        resultssubtitle = function() private$..resultssubtitle$value),
    private = list(
        ..dep = NA,
        ..group = NA,
        ..grvar = NA,
        ..typestatistics = NA,
        ..effsizetype = NA,
        ..centralityplotting = NA,
        ..centralitytype = NA,
        ..mytitle = NA,
        ..xtitle = NA,
        ..ytitle = NA,
        ..originaltheme = NA,
        ..resultssubtitle = NA)
)

jjdotplotstatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjdotplotstatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Dot Chart",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "excl",
                    "originaltheme",
                    "typestatistics"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`${group} - {dep} by {grvar}`",
                width=800,
                height=300,
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="`${group} - {dep}`",
                width=400,
                height=300,
                renderFun=".plot",
                requiresData=TRUE))}))

jjdotplotstatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjdotplotstatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjdotplotstats",
                version = c(1,0,0),
                options = options,
                results = jjdotplotstatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Dot Chart
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param group .
#' @param grvar .
#' @param typestatistics .
#' @param effsizetype .
#' @param centralityplotting .
#' @param centralitytype .
#' @param mytitle .
#' @param xtitle .
#' @param ytitle .
#' @param originaltheme .
#' @param resultssubtitle .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjdotplotstats <- function(
    data,
    dep,
    group,
    grvar,
    typestatistics = "parametric",
    effsizetype = "biased",
    centralityplotting = FALSE,
    centralitytype = "parameteric",
    mytitle = "",
    xtitle = "",
    ytitle = "",
    originaltheme = FALSE,
    resultssubtitle = TRUE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjdotplotstats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in group) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjdotplotstatsOptions$new(
        dep = dep,
        group = group,
        grvar = grvar,
        typestatistics = typestatistics,
        effsizetype = effsizetype,
        centralityplotting = centralityplotting,
        centralitytype = centralitytype,
        mytitle = mytitle,
        xtitle = xtitle,
        ytitle = ytitle,
        originaltheme = originaltheme,
        resultssubtitle = resultssubtitle)

    analysis <- jjdotplotstatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjhistostats.b.R
--------------------------------------------------
Content of R\jjhistostats.b.R:
#' @title Histogram
#' @importFrom R6 R6Class
#' @import jmvcore
#' @import ggplot2


jjhistostatsClass <- if (requireNamespace('jmvcore'))
    R6::R6Class(
        "jjhistostatsClass",
        inherit = jjhistostatsBase,
        private = list(

            # init ----
            .init = function() {

                deplen <- length(self$options$dep)

                self$results$plot$setSize(600, deplen * 450)


                if (!is.null(self$options$grvar)) {

                mydata <- self$data

                grvar <-  self$options$grvar

                num_levels <- nlevels(
                    as.factor(mydata[[grvar]])
                )

                self$results$plot2$setSize(num_levels * 600, deplen * 450)

                }



            }

            # run ----
            ,
            .run = function() {
                ## Initial Message ----
                if (is.null(self$options$dep)) {

                    ## todo ----

                    todo <- glue::glue(
                    "<br>
                    Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Histograms.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html' target='_blank'>gghistostats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_gghistostats.html' target='_blank'>grouped_gghistostats</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                    )

                    self$results$todo$setContent(todo)

                    return()

                } else {

                    todo <- glue::glue("<br>You have selected to make a histogram.<br><hr>")

                    self$results$todo$setContent(todo)

                    if (nrow(self$data) == 0)
                        stop('Data contains no (complete) rows')
                }
            }

            ,
            .plot = function(image, ggtheme, theme, ...) {
                # the plot function ----

                ## Error messages ----

                if (is.null(self$options$dep))
                    return()

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')


                ## read data ----

                mydata <- self$data

                vars <- self$options$dep


                for (var in vars)
                    mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


                ## Exclude NA ----
                    mydata <- jmvcore::naOmit(mydata)

                dep <- self$options$dep

                ## arguments ----

                    binwidth <- NULL

                    if(self$options$changebinwidth) {
                        binwidth <- self$options$binwidth
                    }


                    typestatistics <- self$options$typestatistics





                # gghistostats
                # https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html

                    # originaltheme <- self$options$originaltheme
                    #
                    # selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()

                ## dep == 1 ----

                if (length(self$options$dep) == 1) {
                    plot <-
                        ggstatsplot::gghistostats(
                            data = mydata,
                            x = !!rlang::sym(dep)

                            , type = typestatistics
                            , normal.curve = self$options$normalcurve
                            , results.subtitle = self$options$resultssubtitle
                            , centrality.plotting = self$options$centralityline
                            , binwidth = binwidth

                        )

# extracted_stats <- ggstatsplot::extract_stats(plot)
# extracted_subtitle <- ggstatsplot::extract_subtitle(plot)
# extracted_caption <- ggstatsplot::extract_caption(plot)
#
# self$results$e_stats$setContent(extracted_stats)
# self$results$e_subtitle$setContent(extracted_subtitle)
# self$results$e_caption$setContent(extracted_caption)


                    # originaltheme <- self$options$originaltheme
                    #
                    # if (!originaltheme) {
                    #     plot <- plot + ggtheme
                    # } else {
                    #     plot <- plot + ggstatsplot::theme_ggstatsplot()
                    # }

                }


                ## dep > 1 ----

                if (length(self$options$dep) > 1) {

                    dep2 <- as.list(self$options$dep)
                    dep2_symbols <- purrr::map(dep2, rlang::sym)

                    plotlist <-
                        purrr::pmap(
                            .l = list(
                                x = dep2_symbols,
                                messages = FALSE),
                            .f = function(x, messages) {
                                    ggstatsplot::gghistostats(
                                        data = mydata,
                                        x = !!x,
                                        messages = messages

                                        , type = typestatistics
                                        , normal.curve = self$options$normalcurve
                                        , results.subtitle = self$options$resultssubtitle
                                        , centrality.plotting = self$options$centralityline
                                        , binwidth = binwidth

                                    )
                            }
                        )

                    plot <-
                        ggstatsplot::combine_plots(
                            plotlist = plotlist,
                            plotgrid.args = list(ncol = 1)
                            )
                }

            # originaltheme <- self$options$originaltheme
            #
            # if (!originaltheme) {
            #     plot <- plot + ggtheme
            # } else {
            #     plot <- plot + ggstatsplot::theme_ggstatsplot()
            #     # ggplot2::theme_bw()
            # }

                ## Print Plot ----
                print(plot)
                TRUE

            }


            ,
            .plot2 = function(image, ggtheme, theme, ...) {
                # the plot2 function ----

                ## Error messages ----

                if (is.null(self$options$dep) ||
                    is.null(self$options$grvar))
                    return()

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

                ## read data ----

                mydata <- self$data

                vars <- self$options$dep

                for (var in vars)
                    mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


                ## Exclude NA ----

                    mydata <- jmvcore::naOmit(mydata)

                ## type of statistics ----

                typestatistics <-
                    jmvcore::constructFormula(
                        terms = self$options$typestatistics)

                dep <- self$options$dep

                ## arguments ----

                binwidth <- NULL

                if(self$options$changebinwidth) {
                    binwidth <- self$options$binwidth
                }



                # grouped_gghistostats
                # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_gghistostats.html


                grvar <- self$options$grvar

                ## dep = 1 ----

                if (length(self$options$dep) == 1) {
                    plot2 <- ggstatsplot::grouped_gghistostats(
                        data = mydata,
                        x = !!rlang::sym(dep),
                        grouping.var = !!rlang::sym(grvar)


                        , type = typestatistics
                        , normal.curve = self$options$normalcurve
                        , results.subtitle = self$options$resultssubtitle
                        , centrality.plotting = self$options$centralityline
                        , binwidth = binwidth



                    )

                }

                ## dep > 1 ----

                if (length(self$options$dep) > 1) {
                    dep2 <- as.list(self$options$dep)
                    dep2_symbols <- purrr::map(dep2, rlang::sym)

                    plotlist <-
                        purrr::pmap(
                            .l = list(
                                x = dep2_symbols,
                                messages = FALSE),
                            .f = function(x, messages) {
                                ggstatsplot::grouped_gghistostats(
                                    data = mydata,
                                    x = !!x,
                                    messages = messages,
                                    grouping.var = !!rlang::sym(grvar)


                                    , type = typestatistics
                                    , normal.curve = self$options$normalcurve
                                    , results.subtitle = self$options$resultssubtitle
                                    , centrality.plotting = self$options$centralityline
                                    , binwidth = binwidth

)
                            }
)


                    plot2 <-
                        ggstatsplot::combine_plots(
            plotlist = plotlist,
                        plotgrid.args = list(ncol = 1)
                         )

                }


                ## Print Plot 2 ----

                print(plot2)
                TRUE

            }
        )
    )


File: R\jjhistostats.h.R
--------------------------------------------------
Content of R\jjhistostats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjhistostatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjhistostatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            grvar = NULL,
            typestatistics = "parametric",
            centralityline = TRUE,
            changebinwidth = FALSE,
            binwidth = 1.1,
            resultssubtitle = TRUE,
            normalcurve = FALSE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjhistostats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariables$new(
                "dep",
                dep,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..centralityline <- jmvcore::OptionBool$new(
                "centralityline",
                centralityline,
                default=TRUE)
            private$..changebinwidth <- jmvcore::OptionBool$new(
                "changebinwidth",
                changebinwidth,
                default=FALSE)
            private$..binwidth <- jmvcore::OptionNumber$new(
                "binwidth",
                binwidth,
                default=1.1)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)
            private$..normalcurve <- jmvcore::OptionBool$new(
                "normalcurve",
                normalcurve,
                default=FALSE)

            self$.addOption(private$..dep)
            self$.addOption(private$..grvar)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..centralityline)
            self$.addOption(private$..changebinwidth)
            self$.addOption(private$..binwidth)
            self$.addOption(private$..resultssubtitle)
            self$.addOption(private$..normalcurve)
        }),
    active = list(
        dep = function() private$..dep$value,
        grvar = function() private$..grvar$value,
        typestatistics = function() private$..typestatistics$value,
        centralityline = function() private$..centralityline$value,
        changebinwidth = function() private$..changebinwidth$value,
        binwidth = function() private$..binwidth$value,
        resultssubtitle = function() private$..resultssubtitle$value,
        normalcurve = function() private$..normalcurve$value),
    private = list(
        ..dep = NA,
        ..grvar = NA,
        ..typestatistics = NA,
        ..centralityline = NA,
        ..changebinwidth = NA,
        ..binwidth = NA,
        ..resultssubtitle = NA,
        ..normalcurve = NA)
)

jjhistostatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjhistostatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Histogram",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "*"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`Histogram Splitted by {grvar}`",
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="Histogram",
                renderFun=".plot",
                requiresData=TRUE))}))

jjhistostatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjhistostatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjhistostats",
                version = c(1,0,0),
                options = options,
                results = jjhistostatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Histogram
#'
#' 'Wrapper Function for ggstatsplot::gghistostats and
#' ggstatsplot::grouped_gghistostats to generate Histogram.'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param grvar .
#' @param typestatistics .
#' @param centralityline .
#' @param changebinwidth .
#' @param binwidth .
#' @param resultssubtitle .
#' @param normalcurve .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjhistostats <- function(
    data,
    dep,
    grvar,
    typestatistics = "parametric",
    centralityline = TRUE,
    changebinwidth = FALSE,
    binwidth = 1.1,
    resultssubtitle = TRUE,
    normalcurve = FALSE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjhistostats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjhistostatsOptions$new(
        dep = dep,
        grvar = grvar,
        typestatistics = typestatistics,
        centralityline = centralityline,
        changebinwidth = changebinwidth,
        binwidth = binwidth,
        resultssubtitle = resultssubtitle,
        normalcurve = normalcurve)

    analysis <- jjhistostatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjpiestats.b.R
--------------------------------------------------
Content of R\jjpiestats.b.R:
#' @title Pie Charts
#' @importFrom R6 R6Class
#' @import jmvcore
#'

jjpiestatsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjpiestatsClass",
    inherit = jjpiestatsBase,
    private = list(

        # init ----

        .init = function() {

            self$results$plot1$setSize(650, 450)

            self$results$plot2$setSize(650, 450)

            # if (!is.null(self$options$dep) && !is.null(self$options$grvar)) {
            #
            #     mydata <- self$data
            #
            #     grvar <-  self$options$grvar
            #
            #     num_levels <- nlevels(
            #         as.factor(mydata[[grvar]])
            #     )
            #
            #     self$results$plot3$setSize(num_levels * 600, 450)
            #
            # }

            if (!is.null(self$options$grvar) && !is.null(self$options$group)) {

                mydata <- self$data

                group <-  self$options$group

                num_levels_group <- nlevels(
                    as.factor(mydata[[group]])
                )

                self$results$plot4$setSize(num_levels_group * 600, 450)

            }




            if (!is.null(self$options$group) && !is.null(self$options$grvar)) {

                mydata <- self$data

                grvar <-  self$options$grvar

                num_levels <- nlevels(
                    as.factor(mydata[[grvar]])
                )

                group <-  self$options$group

                num_levels_group <- nlevels(
                    as.factor(mydata[[group]])
                )

                # self$results$plot3$setSize((num_levels + num_levels_group) * 600, 450)

                self$results$plot4$setSize((num_levels + num_levels_group) * 600, 450)

            }




        }



        # run ----
        ,
        .run = function() {

            # Initial Message ----
            if ( is.null(self$options$dep) ) {

                # TODO ----

                todo <- glue::glue(
                "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Pie Charts.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggpiestats.html' target='_blank'>ggpiestats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggpiestats.html' target='_blank'>grouped_ggpiestats</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                # TODO ----
                todo <- glue::glue(
                    "<br>You have selected to use Pie Charts.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }


        # the plot1 function ----


        ,
        .plot1 = function(image, ggtheme, theme, ...) {

            # Error messages ----

            if ( is.null(self$options$dep) )
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data

            # Exclude NA ----


            mydata <- jmvcore::naOmit(mydata)

            dep <- self$options$dep


            # ggpiestats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggpiestats.html



            plot1 <-
                ggstatsplot::ggpiestats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = NULL,
                    counts = NULL,
                    ratio = NULL,
                    paired = FALSE,
                    label = "percentage",
                    perc.k = 0,
                    label.args = list(alpha = 1, fill = "white"),
                    bf.message = TRUE,
                    sampling.plan = "indepMulti",
                    fixed.margin = "rows",
                    prior.concentration = 1,
                    title = NULL,
                    subtitle = NULL,
                    caption = NULL,
                    conf.level = 0.95,
                    nboot = 100,
                    legend.title = NULL,
                    k = 2,
                    proportion.test = TRUE,

                    package = "RColorBrewer",
                    palette = "Dark2",
                    ggplot.component = NULL,
                    output = "plot",
                    messages = TRUE
                    , results.subtitle = self$options$resultssubtitle

                    )



            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot1 <- plot1 + ggtheme
            } else {
                plot1 <- plot1 + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }

            # Print Plot1 ----

            print(plot1)
            TRUE

        }


        # the plot2 function ----


        , .plot2 = function(image, ggtheme, theme, ...) {

            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group) )
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----


            # # direction, paired ----
            #
            # direction <- self$options$direction
            #
            # if (direction == "repeated") {
            #
            #     paired <- TRUE
            #
            # } else if (direction == "independent") {
            #
            #     paired <- FALSE
            #
            # }


            # distribution <-
            #     jmvcore::constructFormula(terms = self$options$distribution)

            # pairw <- self$options$pairw


            mydata <- self$data


            # Exclude NA ----


            mydata <- jmvcore::naOmit(mydata)



            # mydep <- mydata[[self$options$dep]]
            # mygroup <- mydata[[self$options$group]]


            dep <- self$options$dep

            group <- self$options$group

            # originaltheme <- self$options$originaltheme


            # dep <- jmvcore::composeTerm(components = dep)

            # group <- jmvcore::composeTerm(components = group)


            # ggpiestats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggpiestats.html

            plot2 <-
                ggstatsplot::ggpiestats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group),
                    counts = NULL,
                    ratio = NULL,
                    paired = FALSE,
                    label = "percentage",
                    perc.k = 0,
                    label.args = list(alpha = 1, fill = "white"),
                    bf.message = TRUE,
                    sampling.plan = "indepMulti",
                    fixed.margin = "rows",
                    prior.concentration = 1,
                    title = NULL,
                    subtitle = NULL,
                    caption = NULL,
                    conf.level = 0.95,
                    nboot = 100,
                    legend.title = NULL,
                    k = 2,
                    proportion.test = TRUE,

                    package = "RColorBrewer",
                    palette = "Dark2",
                    ggplot.component = NULL,
                    output = "plot",
                    messages = TRUE
                    , results.subtitle = self$options$resultssubtitle
                )


            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot2 <- plot2 + ggtheme
            } else {
                plot2 <- plot2 + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }


            # Print Plot2 ----
            print(plot2)
            TRUE
        }



#         # the plot3 function ----
#
#
#
#         , .plot3 = function(image, ggtheme, theme, ...) {
#
#             # Error messages ----
#
#             if ( is.null(self$options$dep) || is.null(self$options$grvar) )
#                 return()
#
#             if (nrow(self$data) == 0)
#                 stop('Data contains no (complete) rows')
#
#
#             # Prepare Data ----
#
#             mydata <- self$data
#
#
#             # # direction, paired ----
#             #
#             # direction <- self$options$direction
#             #
#             # if (direction == "repeated") {
#             #
#             #     paired <- TRUE
#             #
#             # } else if (direction == "independent") {
#             #
#             #     paired <- FALSE
#             #
#             # }
#
#             # Exclude NA ----
#
#             excl <- self$options$excl
#
#             if (excl) {mydata <- jmvcore::naOmit(mydata)}
#
#
#             dep <- self$options$dep
#
#             # group <- self$options$group
#
#
#             # dep <- jmvcore::composeTerm(components = dep)
#
#             # group <- jmvcore::composeTerm(components = group)
#
#
#
#             # originaltheme <- self$options$originaltheme
#
#
#             # grouped_ggpiestats ----
#             # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggpiestats.html
#
#
#             if ( !is.null(self$options$grvar) ) {
#
#             grvar <- self$options$grvar
#
#             # grvar <- jmvcore::composeTerm(components = grvar)
#
#
#                 plot3 <- ggstatsplot::grouped_ggpiestats(
#                     data = mydata,
#                     x = !!rlang::sym(dep),
#                     y = NULL,
#                     counts = NULL,
#                     grouping.var = !!rlang::sym(grvar),
#                     title.prefix = NULL,
#                     output = "plot",
#                     plotgrid.args = list(),
#                     title.text = NULL,
#                     title.args = list(size = 16, fontface = "bold"),
#                     caption.text = NULL,
#                     caption.args = list(size = 10),
#                     sub.text = NULL,
#                     sub.args = list(size = 12)
#                     , ggtheme = ggtheme
#                     , ggstatsplot.layer = originaltheme
#
#                 )
# }
#
#
#             originaltheme <- self$options$originaltheme
#
#             if (!originaltheme) {
#                 plot3 <- plot3 + ggtheme
#             } else {
#                 plot3 <- plot3 + ggstatsplot::theme_ggstatsplot()
#                 # ggplot2::theme_bw()
#             }
#
#
#             # Print Plot3 ----
#             print(plot3)
#             TRUE
#         }
#
#

# the plot4 function ----




        , .plot4 = function(image, ggtheme, theme, ...) {

            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group) || is.null(self$options$grvar) )
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data


            # Exclude NA ----


            mydata <- jmvcore::naOmit(mydata)



            dep <- self$options$dep

            group <- self$options$group

            # originaltheme <- self$options$originaltheme


            # dep <- jmvcore::composeTerm(components = dep)

            # group <- jmvcore::composeTerm(components = group)


            # grouped_ggpiestats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggpiestats.html

            if ( !is.null(self$options$grvar) ) {

                grvar <- self$options$grvar


                originaltheme <- self$options$originaltheme

                selected_theme <- if (!originaltheme) ggtheme else ggstatsplot::theme_ggstatsplot()


                plot4 <- ggstatsplot::grouped_ggpiestats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group),
                    counts = NULL,
                    grouping.var = !!rlang::sym(grvar)

                    , ggtheme = selected_theme
                    , ggstatsplot.layer = originaltheme

                )
            }

            #  originaltheme <- self$options$originaltheme
            #
            # if (!originaltheme) {
            #     plot4 <- plot4 + ggtheme
            # } else {
            #     plot4 <- plot4 + ggstatsplot::theme_ggstatsplot()
            #     # ggplot2::theme_bw()
            # }

            # Print Plot4 ----
            print(plot4)
            TRUE
        }

    )
)


File: R\jjpiestats.h.R
--------------------------------------------------
Content of R\jjpiestats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjpiestatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjpiestatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            group = NULL,
            grvar = NULL,
            typestatistics = "parametric",
            originaltheme = FALSE,
            resultssubtitle = TRUE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjpiestats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariable$new(
                "dep",
                dep,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)

            self$.addOption(private$..dep)
            self$.addOption(private$..group)
            self$.addOption(private$..grvar)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..originaltheme)
            self$.addOption(private$..resultssubtitle)
        }),
    active = list(
        dep = function() private$..dep$value,
        group = function() private$..group$value,
        grvar = function() private$..grvar$value,
        typestatistics = function() private$..typestatistics$value,
        originaltheme = function() private$..originaltheme$value,
        resultssubtitle = function() private$..resultssubtitle$value),
    private = list(
        ..dep = NA,
        ..group = NA,
        ..grvar = NA,
        ..typestatistics = NA,
        ..originaltheme = NA,
        ..resultssubtitle = NA)
)

jjpiestatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjpiestatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot4 = function() private$.items[["plot4"]],
        plot2 = function() private$.items[["plot2"]],
        plot1 = function() private$.items[["plot1"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Pie Charts",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do",
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "direction",
                    "originaltheme")))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot4",
                title="`${group} - {dep} by {grvar}`",
                width=800,
                height=300,
                renderFun=".plot4",
                requiresData=TRUE,
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "direction",
                    "originaltheme"),
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`${group} - {dep}`",
                width=400,
                height=300,
                renderFun=".plot2",
                requiresData=TRUE,
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "direction",
                    "originaltheme"),
                visible="(group)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot1",
                title="`${dep}`",
                width=400,
                height=300,
                renderFun=".plot1",
                requiresData=TRUE,
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "direction",
                    "originaltheme"),
                visible="(dep)"))}))

jjpiestatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjpiestatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjpiestats",
                version = c(1,0,0),
                options = options,
                results = jjpiestatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Pie Charts
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param group .
#' @param grvar .
#' @param typestatistics .
#' @param originaltheme .
#' @param resultssubtitle .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot4} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot1} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjpiestats <- function(
    data,
    dep,
    group,
    grvar,
    typestatistics = "parametric",
    originaltheme = FALSE,
    resultssubtitle = TRUE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjpiestats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in dep) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in group) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])
    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjpiestatsOptions$new(
        dep = dep,
        group = group,
        grvar = grvar,
        typestatistics = typestatistics,
        originaltheme = originaltheme,
        resultssubtitle = resultssubtitle)

    analysis <- jjpiestatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjscatterstats.b.R
--------------------------------------------------
Content of R\jjscatterstats.b.R:
#' @title Scatter Plot
#' @importFrom R6 R6Class
#' @import jmvcore
#'

jjscatterstatsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjscatterstatsClass",
    inherit = jjscatterstatsBase,
    private = list(


        # init ----

        .init = function() {

            self$results$plot$setSize(600, 450)


            if (!is.null(self$options$grvar)) {

                mydata <- self$data

                grvar <-  self$options$grvar

                num_levels <- nlevels(
                    as.factor(mydata[[grvar]])
                )

                self$results$plot2$setSize(num_levels * 600, 450)

            }

        }

        # run ----
        ,
        .run = function() {

            # Initial Message ----
            if ( is.null(self$options$dep) || is.null(self$options$group)) {

                # todo ----

                todo <- glue::glue(
                "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Scatter Plot.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html' target='_blank'>ggscatterstats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggscatterstats.html' target='_blank'>grouped_ggscatterstats</a>.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                # todo ----
                todo <- glue::glue(
                    "<br>You have selected to use a scatter plot.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }



        ,
        .plot = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----


            mydata <- self$data


            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            dep <- self$options$dep

            group <- self$options$group



            mytitle <- self$options$mytitle

            if (mytitle == '') {
                mytitle <- NULL
            }


            xtitle <- self$options$xtitle

            if (xtitle == '') {
                xtitle <- NULL
            }

            ytitle <- self$options$ytitle

            if (ytitle == '') {
                ytitle <- NULL
            }


            # ggscatterstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html



            plot <-
                ggstatsplot::ggscatterstats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group)

                    , type = typestatistics

                    , title = mytitle
                    , xlab = xtitle
                    , ylab = ytitle

                    , results.subtitle = self$options$resultssubtitle

                )



            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot <- plot + ggtheme
            } else {
                plot <- plot + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }

            # Print Plot ----

            print(plot)
            TRUE

        }


        ,
        .plot2 = function(image, ggtheme, theme, ...) {
            # the plot function ----
            # Error messages ----

            if ( is.null(self$options$dep) || is.null(self$options$group) || is.null(self$options$grvar))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            # Prepare Data ----

            mydata <- self$data

            vars <- self$options$dep


            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])


            # Exclude NA ----

            mydata <- jmvcore::naOmit(mydata)


            # type of statistics ----


            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)

            dep <- self$options$dep

            group <- self$options$group


            mytitle <- self$options$mytitle

            if (mytitle == '') {
                mytitle <- NULL
            }


            # grouped_ggscatterstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggscatterstats.html



            if ( !is.null(self$options$grvar) ) {

                grvar <- self$options$grvar

                plot2 <- ggstatsplot::grouped_ggscatterstats(
                    data = mydata,
                    x = !!rlang::sym(dep),
                    y = !!rlang::sym(group),
                    grouping.var = !!rlang::sym(grvar),

                    , type = typestatistics
                    # , title = mytitle
                    , results.subtitle = self$options$resultssubtitle


                )
            }


            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot2 <- plot2 + ggtheme
            } else {
                plot2 <- plot2 + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }

            # Print Plot ----
            print(plot2)
            TRUE
        }

    )
)


File: R\jjscatterstats.h.R
--------------------------------------------------
Content of R\jjscatterstats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjscatterstatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjscatterstatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep = NULL,
            group = NULL,
            grvar = NULL,
            typestatistics = "parametric",
            mytitle = "",
            xtitle = "",
            ytitle = "",
            originaltheme = FALSE,
            resultssubtitle = TRUE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjscatterstats",
                requiresData=TRUE,
                ...)

            private$..dep <- jmvcore::OptionVariable$new(
                "dep",
                dep,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..grvar <- jmvcore::OptionVariable$new(
                "grvar",
                grvar,
                suggested=list(
                    "ordinal",
                    "nominal"),
                permitted=list(
                    "factor"))
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..mytitle <- jmvcore::OptionString$new(
                "mytitle",
                mytitle,
                default="")
            private$..xtitle <- jmvcore::OptionString$new(
                "xtitle",
                xtitle,
                default="")
            private$..ytitle <- jmvcore::OptionString$new(
                "ytitle",
                ytitle,
                default="")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)

            self$.addOption(private$..dep)
            self$.addOption(private$..group)
            self$.addOption(private$..grvar)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..mytitle)
            self$.addOption(private$..xtitle)
            self$.addOption(private$..ytitle)
            self$.addOption(private$..originaltheme)
            self$.addOption(private$..resultssubtitle)
        }),
    active = list(
        dep = function() private$..dep$value,
        group = function() private$..group$value,
        grvar = function() private$..grvar$value,
        typestatistics = function() private$..typestatistics$value,
        mytitle = function() private$..mytitle$value,
        xtitle = function() private$..xtitle$value,
        ytitle = function() private$..ytitle$value,
        originaltheme = function() private$..originaltheme$value,
        resultssubtitle = function() private$..resultssubtitle$value),
    private = list(
        ..dep = NA,
        ..group = NA,
        ..grvar = NA,
        ..typestatistics = NA,
        ..mytitle = NA,
        ..xtitle = NA,
        ..ytitle = NA,
        ..originaltheme = NA,
        ..resultssubtitle = NA)
)

jjscatterstatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjscatterstatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot2 = function() private$.items[["plot2"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Scatter Plot",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep",
                    "group",
                    "grvar",
                    "excl",
                    "originaltheme",
                    "typestatistics"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot2",
                title="`${group} vs {dep} by {grvar}`",
                width=1600,
                height=600,
                renderFun=".plot2",
                requiresData=TRUE,
                visible="(grvar)"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="`${group} vs {dep}`",
                width=800,
                height=600,
                renderFun=".plot",
                requiresData=TRUE))}))

jjscatterstatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjscatterstatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjscatterstats",
                version = c(1,0,0),
                options = options,
                results = jjscatterstatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Scatter Plot
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep .
#' @param group .
#' @param grvar .
#' @param typestatistics .
#' @param mytitle .
#' @param xtitle .
#' @param ytitle .
#' @param originaltheme .
#' @param resultssubtitle .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot2} \tab \tab \tab \tab \tab an image \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjscatterstats <- function(
    data,
    dep,
    group,
    grvar,
    typestatistics = "parametric",
    mytitle = "",
    xtitle = "",
    ytitle = "",
    originaltheme = FALSE,
    resultssubtitle = TRUE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjscatterstats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep)) dep <- jmvcore::resolveQuo(jmvcore::enquo(dep))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(grvar)) grvar <- jmvcore::resolveQuo(jmvcore::enquo(grvar))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep), dep, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(grvar), grvar, NULL))

    for (v in grvar) if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])

    options <- jjscatterstatsOptions$new(
        dep = dep,
        group = group,
        grvar = grvar,
        typestatistics = typestatistics,
        mytitle = mytitle,
        xtitle = xtitle,
        ytitle = ytitle,
        originaltheme = originaltheme,
        resultssubtitle = resultssubtitle)

    analysis <- jjscatterstatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



File: R\jjstatsplot-data.R
--------------------------------------------------
Content of R\jjstatsplot-data.R:
#' @title histopathology
#'
#' @description Fake histopathology research data.
#' @usage data(histopathology)
#' @format A data frame
"histopathology"


File: R\jjstatsplot-package.R
--------------------------------------------------
Content of R\jjstatsplot-package.R:
#' \code{jjstatsplot}
#'
#' @title jjstatsplot: Wrapper for ggstatsplot
#'
#' @description `jjstatsplot` A wrapper for ggstatsplot: jjstatsplot help
#' researchers to generate plots in jamovi based on ggstatsplot package.
#'
#'
#'
#' For more documentation, see the
#' \href{https://sbalci.github.io/ClinicoPathJamoviModule/}{Website}.
#'
#' @docType package
#' @aliases jjstatsplot jjstatsplot-package
#' @name jjstatsplot-package
"_PACKAGE"


File: R\jjwithinstats.b.R
--------------------------------------------------
Content of R\jjwithinstats.b.R:
#' @title Violin Plots to Compare Within Group
#' @importFrom R6 R6Class
#' @import jmvcore
#'


jjwithinstatsClass <- if (requireNamespace('jmvcore')) R6::R6Class(
    "jjwithinstatsClass",
    inherit = jjwithinstatsBase,
    private = list(

        # init ----

        .init = function() {

            self$results$plot$setSize(650, 450)

            if (!is.null(self$options$dep3) || !is.null(self$options$dep4))
                self$results$plot$setSize(900, 600)

            # if (!is.null(self$options$dep3) && !is.null(self$options$dep4))
            #     self$results$plot$setSize(800, 600)

        }

        # run ----
        ,
        .run = function() {

            ## Initial Message ----
            if ( is.null(self$options$dep1) || is.null(self$options$dep2)) {

                ### todo ----

                todo <- glue::glue(
                "<br>Welcome to ClinicoPath
                <br><br>
                This tool will help you generate Violin Plots for repeated measurements.
                <br><br>
                The data should be in wide format: Each row should have a unique case. Columns should have separate measurements. This function does not allow missing values.
                <br><br>
                This function uses ggplot2 and ggstatsplot packages. See documentations <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/ggwithinstats.html' target='_blank'>ggwithinstats</a> and <a href = 'https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggwithinstats.html' target='_blank'>grouped_ggwithinstats</a>.
 Please see above links for further information.
                <br>
                Please cite jamovi and the packages as given below.
                <br><hr>"
                )

                self$results$todo$setContent(todo)

                return()

            } else {

                ### todo ----
                todo <- glue::glue(
                "<br>You have selected to use a Violin Plot to Compare repeated measurements.<br><hr>")

                self$results$todo$setContent(todo)

                if (nrow(self$data) == 0)
                    stop('Data contains no (complete) rows')

            }
        }


            # the plot function ----
        ,
        .plot = function(image, ggtheme, theme, ...) {

            ## Error messages ----

            if (is.null(self$options$dep1) ||
                is.null(self$options$dep2))
                return()

            if (nrow(self$data) == 0)
                stop('Data contains no (complete) rows')


            ## Prepare Data ----

            mydata <- self$data

            mydata$rowid <- seq.int(nrow(mydata))

            dep1 <- self$options$dep1

            dep2 <- self$options$dep2

            dep3 <- self$options$dep3

            dep4 <- self$options$dep4

            vars <- c(dep1, dep2, dep3, dep4)

            for (var in vars)
                mydata[[var]] <- jmvcore::toNumeric(mydata[[var]])

            mydata <- jmvcore::naOmit(mydata)

            long_data <- tidyr::pivot_longer(
                mydata,
                cols = vars,
                names_to = "measurement",
                values_to = "value"
            )

            long_data$measurement <- factor(long_data$measurement,
                                            levels = vars)


            # mydataview ----
            # self$results$mydataview$setContent(
            #     list(
            #     dep1 = dep1,
            #     dep2 = dep2,
            #     dep3 = dep3,
            #     dep4 = dep4,
            #     mydata = head(mydata),
            #     long_data = head(long_data)
            # )
            # )


            ## type of statistics ----

            typestatistics <-
                jmvcore::constructFormula(terms = self$options$typestatistics)


            pairwisecomparisons <- self$options$pairwisecomparisons

            pairwisedisplay <-
                jmvcore::constructFormula(terms = self$options$pairwisedisplay)

            padjustmethod <-
                jmvcore::constructFormula(terms = self$options$padjustmethod)

            # read arguments ----

            pointpath <- self$options$pointpath

            mytitle <- self$options$mytitle

            xtitle <- self$options$xtitle

            if (xtitle == '') {
                xtitle <- NULL
            }

            ytitle <- self$options$ytitle

            if (ytitle == '') {
                ytitle <- NULL
            }

            effsizetype <- self$options$effsizetype

            pointpath <- self$options$pointpath

            centralityplotting <- self$options$centralityplotting

            centralitytype <- self$options$centralitytype

            centralitypath <- self$options$centralitypath

            violin <- self$options$violin

            boxplot <- self$options$boxplot

            point <- self$options$point

            if (violin) {

                violinargs <- list(width = 0.5, alpha = 0.2, na.rm = TRUE)

                } else {

                violinargs <- list(width = 0)
            }


            if (boxplot) {
            boxplotargs <- list(width = 0.2, alpha = 0.5, na.rm = TRUE)
            } else {
            boxplotargs <- list(width = 0)
            }

            if (point) {
            pointargs <- list(alpha = 0.5, linetype = "dashed")
            } else {
            pointargs <- list(alpha = 0)
            }


            # ggwithinstats ----
            # https://indrajeetpatil.github.io/ggstatsplot/reference/ggwithinstats.html


            plot <-
                ggstatsplot::ggwithinstats(
                    data = long_data,
                    x = measurement,
                    y = value,
                    paired = TRUE,
                    id = rowid


                    , title = mytitle
                    , xlab = xtitle
                    , ylab = ytitle
                    , type = typestatistics
                    , pairwise.comparisons = pairwisecomparisons
                    , pairwise.display = pairwisedisplay
                    , p.adjust.method = padjustmethod
                    , effsize.type = effsizetype
                    , centrality.plotting = centralityplotting
                    , centrality.type = centralitytype
                    , point.path = pointpath
                    , centrality.path = centralitypath
                    , violin.args = violinargs
                    , boxplot.args = boxplotargs
                    , point.args = pointargs
                    , results.subtitle = self$options$resultssubtitle

                )


            # mydataview ----
            # extracted_stats <- ggstatsplot::extract_stats(plot)
            # extracted_subtitle <- ggstatsplot::extract_subtitle(plot)
            # extracted_caption <- ggstatsplot::extract_caption(plot)
            # self$results$e_plot$setContent(
            #     as.list(
            #         plot
            #     )
            # )
            # self$results$e_stats$setContent(as.list(extracted_stats))
            # self$results$e_subtitle$setContent(as.list(extracted_subtitle))
            # self$results$e_caption$setContent(as.list(extracted_caption))


            originaltheme <- self$options$originaltheme

            if (!originaltheme) {
                plot <- plot + ggtheme
            } else {
                plot <- plot + ggstatsplot::theme_ggstatsplot()
                # ggplot2::theme_bw()
            }


            # Print Plot ----

            print(plot)
            TRUE

        }

    )
)


File: R\jjwithinstats.h.R
--------------------------------------------------
Content of R\jjwithinstats.h.R:

# This file is automatically generated, you probably don't want to edit this

jjwithinstatsOptions <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjwithinstatsOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            dep1 = NULL,
            dep2 = NULL,
            dep3 = NULL,
            dep4 = NULL,
            pointpath = FALSE,
            centralitypath = FALSE,
            centralityplotting = FALSE,
            centralitytype = "parameteric",
            typestatistics = "parametric",
            pairwisecomparisons = FALSE,
            pairwisedisplay = "significant",
            padjustmethod = "holm",
            effsizetype = "biased",
            violin = TRUE,
            boxplot = TRUE,
            point = TRUE,
            mytitle = "Within Group Comparison",
            xtitle = "",
            ytitle = "",
            originaltheme = FALSE,
            resultssubtitle = TRUE, ...) {

            super$initialize(
                package="jjstatsplot",
                name="jjwithinstats",
                requiresData=TRUE,
                ...)

            private$..dep1 <- jmvcore::OptionVariable$new(
                "dep1",
                dep1,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..dep2 <- jmvcore::OptionVariable$new(
                "dep2",
                dep2,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..dep3 <- jmvcore::OptionVariable$new(
                "dep3",
                dep3,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..dep4 <- jmvcore::OptionVariable$new(
                "dep4",
                dep4,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..pointpath <- jmvcore::OptionBool$new(
                "pointpath",
                pointpath,
                default=FALSE)
            private$..centralitypath <- jmvcore::OptionBool$new(
                "centralitypath",
                centralitypath,
                default=FALSE)
            private$..centralityplotting <- jmvcore::OptionBool$new(
                "centralityplotting",
                centralityplotting,
                default=FALSE)
            private$..centralitytype <- jmvcore::OptionList$new(
                "centralitytype",
                centralitytype,
                options=list(
                    "parameteric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parameteric")
            private$..typestatistics <- jmvcore::OptionList$new(
                "typestatistics",
                typestatistics,
                options=list(
                    "parametric",
                    "nonparametric",
                    "robust",
                    "bayes"),
                default="parametric")
            private$..pairwisecomparisons <- jmvcore::OptionBool$new(
                "pairwisecomparisons",
                pairwisecomparisons,
                default=FALSE)
            private$..pairwisedisplay <- jmvcore::OptionList$new(
                "pairwisedisplay",
                pairwisedisplay,
                options=list(
                    "significant",
                    "non-significant",
                    "everything"),
                default="significant")
            private$..padjustmethod <- jmvcore::OptionList$new(
                "padjustmethod",
                padjustmethod,
                options=list(
                    "holm",
                    "hochberg",
                    "hommel",
                    "bonferroni",
                    "BH",
                    "BY",
                    "fdr",
                    "none"),
                default="holm")
            private$..effsizetype <- jmvcore::OptionList$new(
                "effsizetype",
                effsizetype,
                options=list(
                    "biased",
                    "unbiased",
                    "eta",
                    "omega"),
                default="biased")
            private$..violin <- jmvcore::OptionBool$new(
                "violin",
                violin,
                default=TRUE)
            private$..boxplot <- jmvcore::OptionBool$new(
                "boxplot",
                boxplot,
                default=TRUE)
            private$..point <- jmvcore::OptionBool$new(
                "point",
                point,
                default=TRUE)
            private$..mytitle <- jmvcore::OptionString$new(
                "mytitle",
                mytitle,
                default="Within Group Comparison")
            private$..xtitle <- jmvcore::OptionString$new(
                "xtitle",
                xtitle,
                default="")
            private$..ytitle <- jmvcore::OptionString$new(
                "ytitle",
                ytitle,
                default="")
            private$..originaltheme <- jmvcore::OptionBool$new(
                "originaltheme",
                originaltheme,
                default=FALSE)
            private$..resultssubtitle <- jmvcore::OptionBool$new(
                "resultssubtitle",
                resultssubtitle,
                default=TRUE)

            self$.addOption(private$..dep1)
            self$.addOption(private$..dep2)
            self$.addOption(private$..dep3)
            self$.addOption(private$..dep4)
            self$.addOption(private$..pointpath)
            self$.addOption(private$..centralitypath)
            self$.addOption(private$..centralityplotting)
            self$.addOption(private$..centralitytype)
            self$.addOption(private$..typestatistics)
            self$.addOption(private$..pairwisecomparisons)
            self$.addOption(private$..pairwisedisplay)
            self$.addOption(private$..padjustmethod)
            self$.addOption(private$..effsizetype)
            self$.addOption(private$..violin)
            self$.addOption(private$..boxplot)
            self$.addOption(private$..point)
            self$.addOption(private$..mytitle)
            self$.addOption(private$..xtitle)
            self$.addOption(private$..ytitle)
            self$.addOption(private$..originaltheme)
            self$.addOption(private$..resultssubtitle)
        }),
    active = list(
        dep1 = function() private$..dep1$value,
        dep2 = function() private$..dep2$value,
        dep3 = function() private$..dep3$value,
        dep4 = function() private$..dep4$value,
        pointpath = function() private$..pointpath$value,
        centralitypath = function() private$..centralitypath$value,
        centralityplotting = function() private$..centralityplotting$value,
        centralitytype = function() private$..centralitytype$value,
        typestatistics = function() private$..typestatistics$value,
        pairwisecomparisons = function() private$..pairwisecomparisons$value,
        pairwisedisplay = function() private$..pairwisedisplay$value,
        padjustmethod = function() private$..padjustmethod$value,
        effsizetype = function() private$..effsizetype$value,
        violin = function() private$..violin$value,
        boxplot = function() private$..boxplot$value,
        point = function() private$..point$value,
        mytitle = function() private$..mytitle$value,
        xtitle = function() private$..xtitle$value,
        ytitle = function() private$..ytitle$value,
        originaltheme = function() private$..originaltheme$value,
        resultssubtitle = function() private$..resultssubtitle$value),
    private = list(
        ..dep1 = NA,
        ..dep2 = NA,
        ..dep3 = NA,
        ..dep4 = NA,
        ..pointpath = NA,
        ..centralitypath = NA,
        ..centralityplotting = NA,
        ..centralitytype = NA,
        ..typestatistics = NA,
        ..pairwisecomparisons = NA,
        ..pairwisedisplay = NA,
        ..padjustmethod = NA,
        ..effsizetype = NA,
        ..violin = NA,
        ..boxplot = NA,
        ..point = NA,
        ..mytitle = NA,
        ..xtitle = NA,
        ..ytitle = NA,
        ..originaltheme = NA,
        ..resultssubtitle = NA)
)

jjwithinstatsResults <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjwithinstatsResults",
    inherit = jmvcore::Group,
    active = list(
        todo = function() private$.items[["todo"]],
        plot = function() private$.items[["plot"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Violin Plots to Compare Within Groups",
                refs=list(
                    "ggplot2",
                    "ggstatsplot",
                    "ClinicoPathJamoviModule"),
                clearWith=list(
                    "dep1",
                    "dep2",
                    "dep3",
                    "dep4",
                    "typestatistics",
                    "originaltheme",
                    "excl"))
            self$add(jmvcore::Html$new(
                options=options,
                name="todo",
                title="To Do"))
            self$add(jmvcore::Image$new(
                options=options,
                name="plot",
                title="Violin Plots",
                renderFun=".plot",
                requiresData=TRUE))}))

jjwithinstatsBase <- if (requireNamespace("jmvcore", quietly=TRUE)) R6::R6Class(
    "jjwithinstatsBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = "jjstatsplot",
                name = "jjwithinstats",
                version = c(1,0,0),
                options = options,
                results = jjwithinstatsResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE,
                weightsSupport = 'auto')
        }))

#' Box-Violin Plots to Compare Within Groups
#'
#' 
#'
#' @examples
#' \donttest{
#' # example will be added
#'}
#' @param data The data as a data frame.
#' @param dep1 .
#' @param dep2 .
#' @param dep3 .
#' @param dep4 .
#' @param pointpath .
#' @param centralitypath .
#' @param centralityplotting .
#' @param centralitytype .
#' @param typestatistics .
#' @param pairwisecomparisons .
#' @param pairwisedisplay .
#' @param padjustmethod .
#' @param effsizetype .
#' @param violin .
#' @param boxplot .
#' @param point .
#' @param mytitle .
#' @param xtitle .
#' @param ytitle .
#' @param originaltheme .
#' @param resultssubtitle .
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$todo} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$plot} \tab \tab \tab \tab \tab an image \cr
#' }
#'
#' @export
jjwithinstats <- function(
    data,
    dep1,
    dep2,
    dep3,
    dep4,
    pointpath = FALSE,
    centralitypath = FALSE,
    centralityplotting = FALSE,
    centralitytype = "parameteric",
    typestatistics = "parametric",
    pairwisecomparisons = FALSE,
    pairwisedisplay = "significant",
    padjustmethod = "holm",
    effsizetype = "biased",
    violin = TRUE,
    boxplot = TRUE,
    point = TRUE,
    mytitle = "Within Group Comparison",
    xtitle = "",
    ytitle = "",
    originaltheme = FALSE,
    resultssubtitle = TRUE) {

    if ( ! requireNamespace("jmvcore", quietly=TRUE))
        stop("jjwithinstats requires jmvcore to be installed (restart may be required)")

    if ( ! missing(dep1)) dep1 <- jmvcore::resolveQuo(jmvcore::enquo(dep1))
    if ( ! missing(dep2)) dep2 <- jmvcore::resolveQuo(jmvcore::enquo(dep2))
    if ( ! missing(dep3)) dep3 <- jmvcore::resolveQuo(jmvcore::enquo(dep3))
    if ( ! missing(dep4)) dep4 <- jmvcore::resolveQuo(jmvcore::enquo(dep4))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(dep1), dep1, NULL),
            `if`( ! missing(dep2), dep2, NULL),
            `if`( ! missing(dep3), dep3, NULL),
            `if`( ! missing(dep4), dep4, NULL))


    options <- jjwithinstatsOptions$new(
        dep1 = dep1,
        dep2 = dep2,
        dep3 = dep3,
        dep4 = dep4,
        pointpath = pointpath,
        centralitypath = centralitypath,
        centralityplotting = centralityplotting,
        centralitytype = centralitytype,
        typestatistics = typestatistics,
        pairwisecomparisons = pairwisecomparisons,
        pairwisedisplay = pairwisedisplay,
        padjustmethod = padjustmethod,
        effsizetype = effsizetype,
        violin = violin,
        boxplot = boxplot,
        point = point,
        mytitle = mytitle,
        xtitle = xtitle,
        ytitle = ytitle,
        originaltheme = originaltheme,
        resultssubtitle = resultssubtitle)

    analysis <- jjwithinstatsClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



